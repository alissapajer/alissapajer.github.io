<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Alissa Pajer's Blorg - Alissa Pajer</title><link>/</link><description></description><lastBuildDate>Sat, 01 May 2021 00:00:00 -0400</lastBuildDate><item><title>mathpost</title><link>/posts/mathpost.html</link><description>&lt;p&gt;This post is to test math&lt;/p&gt;
&lt;div class="math"&gt;$$x = y^z$$&lt;/div&gt;
&lt;p&gt;but can it do &lt;span class="math"&gt;\(i=n^{line}\)&lt;/span&gt; math?
&lt;/p&gt;
&lt;div class="math"&gt;$$\int_{foo}^{bar} \delta d\delta = \infty \Pi_i \Sigma 3$$&lt;/div&gt;
&lt;p&gt;another eqn&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = \int_{-\infty}^{\infty} \hat{f} (\Upsilon) e^{2\pi i x \xi}$$&lt;/div&gt;
&lt;p&gt;add some more text&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById …&lt;/script&gt;&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 01 May 2021 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2021-05-01:/posts/mathpost.html</guid><category>misc</category></item><item><title>Thoughts on LambdaConf 2016</title><link>/posts/2016-03-26-lambdaconf.html</link><description>&lt;p&gt;This article is written in response to the article &lt;a href="http://degoes.net/articles/lambdaconf-inclusion"&gt;Wrestling With Inclusion at LambdaConf&lt;/a&gt;. Twitter hashtag #lambdaconf.&lt;/p&gt;
&lt;p&gt;We need to understand the consequences of our decisions. You decide to take an action, and then consequences follow. In this case, a racist speaker was given a speaking slot at a tech …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2016-03-26:/posts/2016-03-26-lambdaconf.html</guid><category>misc</category></item><item><title>Notions of Variance in Scala</title><link>/posts/2014-06-19-scalavariance.html</link><description>&lt;p&gt;Here is a &lt;a href="https://gist.github.com/alissapajer/50c912d739346c1f00dd"&gt;github gist&lt;/a&gt; with some exercises explaining variance of functors in Scala. Additionally, it explains variance of types over their type parameters.&lt;/p&gt;
&lt;p&gt;I also wrote up a &lt;a href="/images/FunctorMorphismPreservationProof.pdf"&gt;proof&lt;/a&gt; that a given functor implementation preserves morphism composition.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Thu, 19 Jun 2014 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2014-06-19:/posts/2014-06-19-scalavariance.html</guid><category>misc</category><category>scala</category><category>programming</category></item><item><title>Haskell Fixity</title><link>/posts/2014-03-15-haskellfixity.html</link><description>&lt;p&gt;Let's consider some Haskell. Here's a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This function will zip the two provided lists and then sum the pairs of elements, returning a single list of &lt;code&gt;Num&lt;/code&gt;. For example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;*Main&amp;gt; zipSum [1,2,3,4] [3,4]&lt;/span&gt;
&lt;span class="err"&gt;[4,6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great, so …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 15 Mar 2014 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2014-03-15:/posts/2014-03-15-haskellfixity.html</guid><category>misc</category><category>haskell</category><category>programming</category></item><item><title>Haskell Flip</title><link>/posts/2014-02-22-haskellflip.html</link><description>&lt;p&gt;How can we change the order of the arguments to a function? After I answered this question, I realized it's actually a very odd question to ask.&lt;/p&gt;
&lt;p&gt;I'm working my way though &lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskell for Great Good&lt;/a&gt;, and in the &lt;a href="http://learnyouahaskell.com/higher-order-functions#curried-functions"&gt;Curried Functions&lt;/a&gt; section, the author describes the Haskell …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 22 Feb 2014 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2014-02-22:/posts/2014-02-22-haskellflip.html</guid><category>misc</category><category>haskell</category><category>programming</category></item><item><title>Category Theory at Strange Loop 2013</title><link>/posts/2014-02-19-categorytheorystrangeloop.html</link><description>&lt;p&gt;&lt;img alt="diagram" src="/images/diagram.png" title="diagram"&gt;
Back in September 2013 I gave a talk titled "Category Theory: An Abstraction for Anything" at the &lt;a href="https://thestrangeloop.com/"&gt;Strange Loop Conference&lt;/a&gt;. A few days ago, the &lt;a href="http://www.infoq.com/presentations/category-theory"&gt;video&lt;/a&gt; for my talk was released. &lt;/p&gt;
&lt;p&gt;Additionally, I wrote a &lt;a href="http://engineering.richrelevance.com/closing-the-loop-on-category-theory-polymorphism-currying-and-more/"&gt;blog post&lt;/a&gt; about this talk that was published on my employer's blog. &lt;/p&gt;
&lt;p&gt;Here's the talk …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Wed, 19 Feb 2014 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2014-02-19:/posts/2014-02-19-categorytheorystrangeloop.html</guid><category>misc</category><category>math</category><category>programming</category></item><item><title>Blog Setup</title><link>/posts/2014-02-08-blogsetup.html</link><description>&lt;p&gt;Edit 2021-05-01: This blog is no longer generated with Hackyll. It is generated with Pelican.&lt;/p&gt;
&lt;p&gt;When I started my search for a static site generator, I first came across &lt;a href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;. I'm not particularly excited about learning Ruby, but I am excited about learning Haskell.
&lt;img alt="HaskellRuby" src="/images/HaskellRuby.png" title="HaskellRuby"&gt;
This quickly led me to &lt;a href="http://jaspervdj.be/hakyll/"&gt;Hakyll …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 08 Feb 2014 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2014-02-08:/posts/2014-02-08-blogsetup.html</guid><category>misc</category><category>computers</category></item><item><title>Site Properties</title><link>/posts/2014-02-03-siteproperties.html</link><description>&lt;p&gt;This site contains all the things that don't contain themselves.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Mon, 03 Feb 2014 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2014-02-03:/posts/2014-02-03-siteproperties.html</guid><category>misc</category><category>math</category></item><item><title>Insights into Church-Rosser</title><link>/posts/2013-03-26-churchrosser.html</link><description>&lt;p&gt;&lt;em&gt;This post was originally published on the precog.com engineering blog.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Untyped lambda calculus is powerful. In fact, every computable function can be encoded into lambda calculus, and thus so can every bit of Scala code you've ever written. Though, anything more complicated than your basic combinator would be almost …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Tue, 26 Mar 2013 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2013-03-26:/posts/2013-03-26-churchrosser.html</guid><category>misc</category><category>math</category></item></channel></rss>