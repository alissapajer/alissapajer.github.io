<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alissa Pajer's Blog - misc</title><link href="/" rel="alternate"></link><link href="/feeds/misc.atom.xml" rel="self"></link><id>/</id><updated>2022-11-08T00:00:00-05:00</updated><entry><title>Slices of Topology (Homology!)</title><link href="/posts/slices-of-topology-homology.html" rel="alternate"></link><published>2022-11-08T00:00:00-05:00</published><updated>2022-11-08T00:00:00-05:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-11-08:/posts/slices-of-topology-homology.html</id><summary type="html">&lt;h1&gt;Slices of Topology&lt;/h1&gt;
&lt;p&gt;No matter how you slice it and dice it, you get out the same information. Well, that's not exactly true. But I'll show you one way you can look at individual slices of a shape in order to determine its overall topology.&lt;/p&gt;
&lt;h2&gt;Set Up&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Torus" src="/images/pyramid/torus.jpg" title="torus" width="25%"&gt;&lt;/p&gt;
&lt;p&gt;This is basically …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Slices of Topology&lt;/h1&gt;
&lt;p&gt;No matter how you slice it and dice it, you get out the same information. Well, that's not exactly true. But I'll show you one way you can look at individual slices of a shape in order to determine its overall topology.&lt;/p&gt;
&lt;h2&gt;Set Up&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Torus" src="/images/pyramid/torus.jpg" title="torus" width="25%"&gt;&lt;/p&gt;
&lt;p&gt;This is basically a hollow donut with legs. Said differently, it's a shell of a sphere with a hole in it (so it's like a torus), with the lower bits stretched out. This three-dimensional shape has six total local minima and local maxima, which are called critical values. They are labelled as &lt;span class="math"&gt;\(a_1\)&lt;/span&gt; through &lt;span class="math"&gt;\(a_6\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We are going to look at one particular strategy we can use to slice this shape into smaller pieces. We'll then look at each piece individually and determine what shape it is. For example, each piece could be a point or a circle or a sphere or something else. We'll also take note of how many consecutive slices contain each particular shape.&lt;/p&gt;
&lt;h2&gt;Slicing: Levelsets Zigzag Persistent Homology&lt;/h2&gt;
&lt;p&gt;This slicing strategy considers each horizontal slides through each critical value ( &lt;span class="math"&gt;\(a_1\)&lt;/span&gt; through &lt;span class="math"&gt;\(a_6\)&lt;/span&gt; ) and each horizontal region between adjacent critical values. &lt;/p&gt;
&lt;p&gt;We are going to keep track of three different types of shapes: connected components ( &lt;span class="math"&gt;\(H_0\)&lt;/span&gt; ), loops ( &lt;span class="math"&gt;\(H_1\)&lt;/span&gt; ), and voids ( &lt;span class="math"&gt;\(H_2\)&lt;/span&gt; ). &lt;/p&gt;
&lt;p&gt;&lt;img alt="a1" src="/images/pyramid/a1.jpg" title="a1" width="4%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(a_1\)&lt;/span&gt;. A single point.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: Something exists; thus our first connected component is born.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a1-a2" src="/images/pyramid/a1-a2.jpg" title="a1-a2" width="8%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\((a_1, a_2)\)&lt;/span&gt;. A cylinder that's missing its top and bottom.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: Something still exists, so our connected component is still alive.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: Also, a loop is born; this is the loop you can create by drawing a circle around the outside of the cylinder.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a2" src="/images/pyramid/a2.jpg" title="a2" width="15%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(a_2\)&lt;/span&gt;. A single point &lt;em&gt;and&lt;/em&gt; a loop.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: The original connected component still exists. Also, a second thing exists; thus our second connected component is born.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: The loop is still alive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a2-a3" src="/images/pyramid/a2-a3.jpg" title="a2-a3" width="15%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\((a_2, a_3)\)&lt;/span&gt;. Two separate cylinders.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: Two connected components.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: The previous loop still exists, and a second loop is born.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a3" src="/images/pyramid/a3.jpg" title="a3" width="15%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(a_3\)&lt;/span&gt;. Two loops connected at a point.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: Only one connected component remains.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: Both loops still exist.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a3-a4" src="/images/pyramid/a3-a4.jpg" title="a3-a4" width="15%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\((a_3, a_4)\)&lt;/span&gt;. A single cylinder.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: A single connected component.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: Only one loop remains.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a4" src="/images/pyramid/a4.jpg" title="a4" width="15%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(a_4\)&lt;/span&gt;. Two loops connected at a point.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: Still have a single connected component.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: A second loop is alive again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a4-a5" src="/images/pyramid/a4-a5.jpg" title="a4-a5" width="30%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\((a_4, a_5)\)&lt;/span&gt;. Two separate cylinders.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: A second connected component is alive again.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: A second loop is alive again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a5" src="/images/pyramid/a5.jpg" title="a5" width="15%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(a_5\)&lt;/span&gt;. Two loops connected at a point.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: Only one connected component remains.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: Still have both loops.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a5-a6" src="/images/pyramid/a5-a6.jpg" title="a5-a6" width="15%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\((a_5, a_6)\)&lt;/span&gt;. A single cylinder.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: Still have a single connected component.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: Only one loop remains.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="a6" src="/images/pyramid/a6.jpg" title="a6" width="4%"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(a_6\)&lt;/span&gt;. A single point.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_0\)&lt;/span&gt;: A single connected component remains.&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(H_1\)&lt;/span&gt;: There are no loops.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can represent all of that information in a single barcode diagram. Given the barcode diagram, how different an original shape could you draw?&lt;/p&gt;
&lt;p&gt;&lt;img alt="barcode" src="/images/pyramid/barcode.jpg" title="barcode" width="55%"&gt;&lt;/p&gt;
&lt;h2&gt;Talk Slides&lt;/h2&gt;
&lt;p&gt;I gave a talk about this topic at the weekly University of Florida &lt;a href="https://people.clas.ufl.edu/peterbubenik/intro-to-tda/"&gt;research group meeting&lt;/a&gt; for Topological Data Analysis (TDA).&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/Mayer-Vietoris_Pyramid.pdf" title="slides"&gt;Here is a pdf&lt;/a&gt; of the slides I used for the talk.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category><category term="math"></category></entry><entry><title>5x5 Grids of English Words</title><link href="/posts/5x5-grids-of-english-words.html" rel="alternate"></link><published>2022-10-14T00:00:00-04:00</published><updated>2022-10-14T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-10-14:/posts/5x5-grids-of-english-words.html</id><summary type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Here's an example of a valid 5x5 grid. It contains 10 English words (5 across words and 5 down words).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;a w a r e&lt;/span&gt;
&lt;span class="err"&gt;m o l a l&lt;/span&gt;
&lt;span class="err"&gt;a v o i d&lt;/span&gt;
&lt;span class="err"&gt;s e n s e&lt;/span&gt;
&lt;span class="err"&gt;s n e e r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This project aims …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Here's an example of a valid 5x5 grid. It contains 10 English words (5 across words and 5 down words).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;a w a r e&lt;/span&gt;
&lt;span class="err"&gt;m o l a l&lt;/span&gt;
&lt;span class="err"&gt;a v o i d&lt;/span&gt;
&lt;span class="err"&gt;s e n s e&lt;/span&gt;
&lt;span class="err"&gt;s n e e r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This project aims to find all 5x5 grids of English words. The word list I'm using is the python library &lt;code&gt;from english_words import english_words_lower_alpha_set&lt;/code&gt;. This set contains 3213 words. I removed the majority of the proper nouns and all of the non-words (I hope!), which brings the word count down to 2481.&lt;/p&gt;
&lt;p&gt;There are &lt;span class="math"&gt;\(2481^5 = 9.4 \times 10^16 = 94\)&lt;/span&gt; million billion possible groups of 5 non-unique words. If we can process 100 grids per second, then we'd need about &lt;span class="math"&gt;\((2481^5) / 100\)&lt;/span&gt; seconds (so, 29.8 million years!) to compute the set of all grids. This is back-of-the-napkin math, but it gives us a general sense of the orders of magnitudes we're dealing with here.&lt;/p&gt;
&lt;p&gt;Here is a naive implementation that finds all valid 5x5 grids (without excluding duplicate words).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tqdm.notebook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_grids_slow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;words2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# checking set containment is faster than checking list containment&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;d0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="n"&gt;d1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="n"&gt;d3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="n"&gt;d4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d4&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                            &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I ran this function using a set of 3069 words. For &lt;code&gt;a0 = "sloth"&lt;/code&gt;, it took 9 hours to run for each of the first two values of &lt;code&gt;a2&lt;/code&gt;. (I didn't print out what those two values were). There are 3069 possible values for &lt;code&gt;a2&lt;/code&gt;. So, it will take &lt;span class="math"&gt;\(9 * 3069 = 27621\)&lt;/span&gt; hours to complete the computation for all values of &lt;code&gt;a2&lt;/code&gt;. Then we need to run that loop for each value of &lt;code&gt;a1&lt;/code&gt; and each value of &lt;code&gt;a0&lt;/code&gt;, bringing us to 260,155,597,581 hours, which is 29.7 million years. That's too long. Even if we improved this by a few orders of magnitude and ran it in parallel, the brute force approach isn't going to be viable.&lt;/p&gt;
&lt;p&gt;Note that this function processes &lt;span class="math"&gt;\((3069^5) / (260,155,597,581 * 60 * 60) = 290\)&lt;/span&gt; grids per second. &lt;/p&gt;
&lt;h2&gt;The Implementation&lt;/h2&gt;
&lt;p&gt;Starting out, I had a poor intuition for how uncommon 5x5 grids actually are. While it would be nice to compute all grids, a few hundred grids would suffice for my use case. So, I decided to start out by trying to compute just one grid. I fixed &lt;code&gt;a0&lt;/code&gt;. Then I chose a random &lt;code&gt;d0&lt;/code&gt; (starting with the first letter of &lt;code&gt;a0&lt;/code&gt;). Then I chose a random &lt;code&gt;a1&lt;/code&gt;. Then a random &lt;code&gt;d1&lt;/code&gt;. Then a random &lt;code&gt;a2&lt;/code&gt;. Such a grid looked like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;s t e e r&lt;/span&gt;
&lt;span class="err"&gt;i r a t e&lt;/span&gt;
&lt;span class="err"&gt;l a p s e&lt;/span&gt;
&lt;span class="err"&gt;k c _ _ _&lt;/span&gt;
&lt;span class="err"&gt;y e _ _ _&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are no English words that can complete this grid. I ran this function enough times to convince myself that statistically I'd never find a complete grid using this method. And I definitely wouldn't find hundreds (if there even are hundreds!). &lt;/p&gt;
&lt;p&gt;Next I experimented with fixing &lt;code&gt;a0&lt;/code&gt;, and then iterating over all valid &lt;code&gt;d0&lt;/code&gt;s, for all valid &lt;code&gt;a1&lt;/code&gt; words, for all valid &lt;code&gt;d1&lt;/code&gt; words, etc. The indexing was kind of unweidly, and I realized I wasn't gaining anything from alternating between across words and down words.&lt;/p&gt;
&lt;p&gt;So, I decided to fix &lt;code&gt;a0&lt;/code&gt;. Then loop over each &lt;code&gt;a1&lt;/code&gt;, filtering out those values of &lt;code&gt;a1&lt;/code&gt; for which there were not valid down words. Then loop over each &lt;code&gt;a2&lt;/code&gt; in the same fashion. After running this function I noticed that, after fixing the first three across words, there were often only a handful of valid down words remaining. So, instead of iterating over the full set of words two more times (once for each of &lt;code&gt;a3&lt;/code&gt; and &lt;code&gt;a4&lt;/code&gt;), we can just consider the valid remaining down words, checking that the &lt;code&gt;a3&lt;/code&gt; and &lt;code&gt;a4&lt;/code&gt; they produce are valid.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;s t o v e&lt;/span&gt;
&lt;span class="err"&gt;h a v e n&lt;/span&gt;
&lt;span class="err"&gt;a l e r t&lt;/span&gt;
&lt;span class="err"&gt;_ _ _ _ _ &lt;/span&gt;
&lt;span class="err"&gt;_ _ _ _ _ &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tqdm.notebook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;filter_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_grids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0_words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a0_words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a0:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
            &lt;span class="n"&gt;p0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;has_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;has_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;has_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;has_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt;
                &lt;span class="n"&gt;p0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="c1"&gt;# precomputing downs rather than filtering by prefix first is maybe faster&lt;/span&gt;
                &lt;span class="n"&gt;d0s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="n"&gt;d1s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="n"&gt;d2s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="n"&gt;d3s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="n"&gt;d4s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filter_prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d0s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d1s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d2s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d3s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d4s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d0s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d1s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d2s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d3s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d4&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d4s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                                    &lt;span class="n"&gt;a3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                    &lt;span class="n"&gt;a4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a4&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_words_set&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;d0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
                                        &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                                        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                                            &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(I'd be surprised if I couldn't rewrite this function in a more general way using fancy &lt;code&gt;numpy&lt;/code&gt; array index tricks. But, this is fine for now. Also, I could improve this roughly 2x by not double-computing grid transposes (e.g. after computing a grid, store &lt;code&gt;d0&lt;/code&gt; in a file and then check that file each time the function starts with a fresh &lt;code&gt;a0&lt;/code&gt;), but that doesn't seem like a big enough win given the work involved.)&lt;/p&gt;
&lt;p&gt;I wrote this function so that I could run it in parallel (simply by running it at the same time in different jupyter notebook tabs) by passing in a subset of the full word set as &lt;code&gt;a0_words&lt;/code&gt;. I divided the full word set into subsets of size 100 for this purpose.&lt;/p&gt;
&lt;h2&gt;The Results&lt;/h2&gt;
&lt;p&gt;I ran &lt;code&gt;find_grids&lt;/code&gt; in 8 or 9 separate jupyter notebook tabs simultaneously. This was the first time I've heard the fan spin up loudly on my computer.&lt;/p&gt;
&lt;p&gt;I ran the first 800 words and the last 881 words using the above function. I ran the middle 800 words using a different function, which considered all down words after fixing only &lt;code&gt;a0&lt;/code&gt; and &lt;code&gt;a1&lt;/code&gt;. This was slower, but still completed.&lt;/p&gt;
&lt;p&gt;The outputs of the timing look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bless&lt;/span&gt; 

&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="mi"&gt;2480&lt;/span&gt;&lt;span class="sr"&gt;/2480 [08:00&amp;lt;00:00, 7.16it/s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lathe&lt;/span&gt; 

&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="mi"&gt;2480&lt;/span&gt;&lt;span class="sr"&gt;/2480 [03:07&amp;lt;00:00, 12.77it/s&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I ran &lt;code&gt;awk 'NR % 5 == 0' timedresults.txt&lt;/code&gt; on that file to output every 5th row (the rows that contain the times). Then I removed everything but the times themselves in vim using &lt;code&gt;:%s/&amp;lt;.*//&lt;/code&gt;. The rows look like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;
&lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Faster Algorithm&lt;/h3&gt;
&lt;p&gt;Verify that all rows have length 5 (i.e. just minutes and seconds). Multiply the seconds by 60, and then sum them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print length}&amp;#39;&lt;/span&gt; &lt;span class="nt"&gt;timedresults_first800_fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;uniq&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;
  &lt;span class="nt"&gt;800&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;

&lt;span class="nt"&gt;cat&lt;/span&gt; &lt;span class="nt"&gt;timedresults_first800_fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ print ($1 * 60) + $2 }&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{n += $1}; END{print n}&amp;#39;&lt;/span&gt;
  &lt;span class="nt"&gt;308379&lt;/span&gt;

&lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print length}&amp;#39;&lt;/span&gt; &lt;span class="nt"&gt;timedresults_third881_fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;uniq&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; 
  &lt;span class="nt"&gt;881&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;

&lt;span class="nt"&gt;cat&lt;/span&gt; &lt;span class="nt"&gt;timedresults_third881_fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ print ($1 * 60) + $2 }&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{n += $1}; END{print n}&amp;#39;&lt;/span&gt; 
  &lt;span class="nt"&gt;364620&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These 1681 values for &lt;code&gt;a0&lt;/code&gt; took a total of &lt;span class="math"&gt;\((308379 + 364620) / 3600 = 187\)&lt;/span&gt; CPU hours to run. I ran them in 17 jupyter notebook tabs (of 100 &lt;code&gt;a0&lt;/code&gt; values each (one tab had 81)), so each tab took on average 11 hours to complete.&lt;/p&gt;
&lt;h3&gt;Slower Algorithm&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print length}&amp;#39;&lt;/span&gt; &lt;span class="nt"&gt;timedresults_second800_slow_minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;uniq&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;
  &lt;span class="nt"&gt;758&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;

&lt;span class="nt"&gt;cat&lt;/span&gt; &lt;span class="nt"&gt;timedresults_second800_slow_minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ print ($1 * 60) + $2 }&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{n += $1}; END{print n}&amp;#39;&lt;/span&gt; 
  &lt;span class="nt"&gt;377945&lt;/span&gt;

&lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print length}&amp;#39;&lt;/span&gt; &lt;span class="nt"&gt;timedresults_second800_slow_hours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;uniq&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt;
  &lt;span class="nt"&gt;42&lt;/span&gt; &lt;span class="nt"&gt;7&lt;/span&gt;

&lt;span class="nt"&gt;cat&lt;/span&gt; &lt;span class="nt"&gt;timedresults_second800_slow_hours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ print ($1 * 3600) + ($2 * 60) + $3 }&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{n += $1}; END{print n}&amp;#39;&lt;/span&gt;
  &lt;span class="nt"&gt;360329&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These 800 values for &lt;code&gt;a0&lt;/code&gt; took a total of &lt;span class="math"&gt;\((377945 + 360329) / 3600 = 205\)&lt;/span&gt; CPU hours to run. I ran them in 8 juypter notebook tabs, so each tab took on average 25 hours to complete.&lt;/p&gt;
&lt;p&gt;These data have a wide tail. Here are the results greater than 2 hours.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;59&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those curious, &lt;code&gt;a0 = spasm&lt;/code&gt; took &lt;code&gt;9:07:59&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;The Finale&lt;/h2&gt;
&lt;p&gt;If I'd used the faster function exclusively, it'd have taken approximately 276 CPU hours to compute all grids. This is a considerable improvement over 30 million years.&lt;/p&gt;
&lt;p&gt;There are 210 unique grids (excluding transposes). Far fewer than I expected!&lt;/p&gt;
&lt;p&gt;Optimization doesn't need to make things as fast as possible; it just needs to make things fast enough.&lt;/p&gt;
&lt;p&gt;Instead of making the fundamental operations faster, I executed far fewer operations.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category><category term="programming"></category></entry><entry><title>Math Defintions</title><link href="/posts/math-defintions.html" rel="alternate"></link><published>2022-08-27T00:00:00-04:00</published><updated>2022-08-27T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-08-27:/posts/math-defintions.html</id><summary type="html">&lt;p&gt;&lt;em&gt;(In Progress Eternally)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;algebra&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;binary operation&lt;/em&gt; on a set &lt;span class="math"&gt;\(S\)&lt;/span&gt; is a pairwise operation &lt;span class="math"&gt;\(S \times S \rightarrow S\)&lt;/span&gt;. The set is &lt;em&gt;closed&lt;/em&gt; under the operation.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;semigroup&lt;/em&gt; is a set of elements and an associative binary operation operating on the set.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;monoid&lt;/em&gt; is a semigroup with an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;(In Progress Eternally)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;algebra&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;binary operation&lt;/em&gt; on a set &lt;span class="math"&gt;\(S\)&lt;/span&gt; is a pairwise operation &lt;span class="math"&gt;\(S \times S \rightarrow S\)&lt;/span&gt;. The set is &lt;em&gt;closed&lt;/em&gt; under the operation.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;semigroup&lt;/em&gt; is a set of elements and an associative binary operation operating on the set.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;monoid&lt;/em&gt; is a semigroup with an identity element.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;group&lt;/em&gt; is a set of monoid such that for each element there exists an inverse element&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;commutative group&lt;/em&gt; (also known as an &lt;em&gt;abelian group&lt;/em&gt;) is a group whose operation is commutative.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;ring&lt;/em&gt; is a set of elements and two binary operations &lt;span class="math"&gt;\((+)\)&lt;/span&gt; and &lt;span class="math"&gt;\((\times)\)&lt;/span&gt; such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it forms an abelian group under &lt;span class="math"&gt;\((+)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;it forms a monoid under &lt;span class="math"&gt;\((\times)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\((\times)\)&lt;/span&gt; distributes over &lt;span class="math"&gt;\((+)\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;em&gt;field&lt;/em&gt; is a ring such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for each nonzero element (where &lt;span class="math"&gt;\(0\)&lt;/span&gt; is the additive identity) there exists an inverse element&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\((\times)\)&lt;/span&gt; is commutative&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The integers &lt;span class="math"&gt;\(\mathbb{Z}\)&lt;/span&gt; are the cannonical example of a ring. The integers are not a field because some inverses are not contained in the set (e.g. 1/5).&lt;/p&gt;
&lt;h2&gt;topology&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;topological space&lt;/em&gt; is a set equipped with a &lt;em&gt;topology&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;topology&lt;/em&gt; &lt;span class="math"&gt;\(T\)&lt;/span&gt; on a set &lt;span class="math"&gt;\(X\)&lt;/span&gt; is a collection of subsets of &lt;span class="math"&gt;\(X\)&lt;/span&gt; such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the empty set and &lt;span class="math"&gt;\(X\)&lt;/span&gt; are elements of &lt;span class="math"&gt;\(T\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;arbitrary unions are elements of &lt;span class="math"&gt;\(T\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;finite intersections are elements of &lt;span class="math"&gt;\(T\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The elements of &lt;span class="math"&gt;\(T\)&lt;/span&gt; are defined to be &lt;em&gt;open sets&lt;/em&gt;. A subset that is a complement of a closed set is an &lt;em&gt;open set&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Why are the intersections finite and not arbitrary? How do we fit a counterexample into the frame of the subset definition?&lt;/p&gt;
&lt;p&gt;Using De Morgan's laws for set complements (union of complements is complement of intersection; intersection of complements is complement of union), we can rewrite these properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the empty set and &lt;span class="math"&gt;\(X\)&lt;/span&gt; are closed&lt;/li&gt;
&lt;li&gt;the arbitrary intersection of closed sets is closed (i.e. the complement of the arbitrary intersection of closed sets is open)&lt;/li&gt;
&lt;li&gt;the finite union of closed sets is closed (i.e. the complement of the finite union of closed sets is open)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a definition based on neighborhoods of points.&lt;/p&gt;
&lt;h2&gt;category theory&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;category&lt;/em&gt; consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a collection of objects&lt;/li&gt;
&lt;li&gt;for each pair of objects, a collection of morphisms (arrows) from one to the other&lt;/li&gt;
&lt;li&gt;for each pair of compatible morphisms, a binary operation called composition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if &lt;span class="math"&gt;\(u: a \rightarrow b\)&lt;/span&gt; and &lt;span class="math"&gt;\(v: b \rightarrow c\)&lt;/span&gt; then there is a morphism &lt;span class="math"&gt;\(u \circle v: a \rightarrow c\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;composition of morphisms is associative&lt;/li&gt;
&lt;li&gt;for each object &lt;span class="math"&gt;\(a\)&lt;/span&gt;, there is an identity morphism &lt;span class="math"&gt;\(I_a\)&lt;/span&gt; such that for any morphism &lt;span class="math"&gt;\(u: a \rightarrow b\)&lt;/span&gt;, &lt;span class="math"&gt;\(I_a \circle u = u \circle I_b = u\)&lt;/span&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;analysis&lt;/h2&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category><category term="math"></category></entry><entry><title>Topological Data Analysis Intro</title><link href="/posts/topological-data-analysis-intro.html" rel="alternate"></link><published>2022-08-26T00:00:00-04:00</published><updated>2022-08-26T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-08-26:/posts/topological-data-analysis-intro.html</id><summary type="html">&lt;h3&gt;summary&lt;/h3&gt;
&lt;p&gt;Start with some points. Determine a rule for incrementally connecting more and more of the points with lines, planes, solids, and so on. As points become connected, geometric structure emerges. As even more points become connected, geometric structure disappears. We quantify this structure, group it into classes, and observe …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;summary&lt;/h3&gt;
&lt;p&gt;Start with some points. Determine a rule for incrementally connecting more and more of the points with lines, planes, solids, and so on. As points become connected, geometric structure emerges. As even more points become connected, geometric structure disappears. We quantify this structure, group it into classes, and observe when each class is born and dies. Lastly we compare the birth-death plots of various datasets to determine if the datasets share underlying structural similarities.&lt;/p&gt;
&lt;h3&gt;more-detailed-but-still-high-level summary&lt;/h3&gt;
&lt;p&gt;Topological Data Analysis (TDA) encompasses a variety of techniques which &lt;a href="https://arxiv.org/abs/2004.07036"&gt;"connect the dots"&lt;/a&gt;, thereby creating shapes whose topology can be understood. As a simple example, we can cover each of the dots in a point cloud with a circle of a given radius. As we increase that radius, we'll produce a shape with fewer and fewer "holes" until we're left with a mass with no holes. When the radii are too small to overlap, we gain no additional information. When the radii are large enough to encompass the entire point cloud, we loose all information. TDA aims to find the sweet-spot radius that will provide useful information about our data.&lt;/p&gt;
&lt;p&gt;In practice, most interesting datasets are complex enough that the radius technique (described above) &lt;a href="https://www.ias.edu/ideas/2013/lesnick-topological-data-analysis"&gt;falls short&lt;/a&gt;. It doesn't provide a rigorous way to determine which radius creates a topological space that best represents the underlying data. Additionally, it doesn't distinguish between major and minor features in the data. As a result, mathematicians have developed more advanced analysis techniques. One such technique is persistent homology whose core idea is to examine how the topological space changes as the radius changes. This approach smooths over noise in the data, as geometric structures created by noise will disappear quickly as the radius changes, while the structures created by the signal will be long-lived. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://learning-analytics.info/index.php/JLA/article/view/5196/6089"&gt;Distance&lt;/a&gt; is implicit in our discussion of radii. Said differently, in order to be able to draw circles of a given radius around points, we need to have defined a way to measure the length of a line originating from any point in the data. (As a philosophical aside, is this actually the same as being able to measure the distance &lt;em&gt;between&lt;/em&gt; two points?) Thus we will always often to use a well-defined distance as we explore data topologically.&lt;/p&gt;
&lt;p&gt;To more formally study the geometric shape of data, we use simplicial complexes. For an &lt;span class="math"&gt;\(n\)&lt;/span&gt;-dimensional set of data points, we can connect any two points with a line, connect any three points with a plane, connect any four points with a solid, and so on. Any &lt;span class="math"&gt;\(n\)&lt;/span&gt; points comprise a simplex, which is a generalization of a line to a triangle to a tetrahedron to a 5-cell to a something even harder to visualize. A collection of simplices is a simplicial complex &lt;span class="math"&gt;\(K\)&lt;/span&gt; if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Every face of a simplex in &lt;span class="math"&gt;\(K\)&lt;/span&gt; is in &lt;span class="math"&gt;\(K\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Every intersection of simplices &lt;span class="math"&gt;\(A\)&lt;/span&gt; and &lt;span class="math"&gt;\(B\)&lt;/span&gt; in &lt;span class="math"&gt;\(K\)&lt;/span&gt; is a face of both &lt;span class="math"&gt;\(A\)&lt;/span&gt; and &lt;span class="math"&gt;\(B\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Counterexample to 1&lt;/em&gt; (but not to 2): The singleton set &lt;span class="math"&gt;\(X = \{ triangle \}\)&lt;/span&gt; consisting of three points, the lines that connects them, and the area inside is not a simplicial complex because each of the three lines (faces) is not a member of &lt;span class="math"&gt;\(X\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Counterexample to 2&lt;/em&gt; (but not to 1): Draw four points in a square. Draw two lines connecting the points diagonal from each other (you've drawn an "X"). Each line is a simplex. Their intersection (at the center of the square) is not a face of either simplex.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Failed Counterexample to 2&lt;/em&gt;: (I was intersecting complexes and not simplices.) Complex &lt;span class="math"&gt;\(A\)&lt;/span&gt;: Draw four points; draw a line connecting one point &lt;span class="math"&gt;\(c\)&lt;/span&gt; to the other three &lt;span class="math"&gt;\(x\)&lt;/span&gt;, &lt;span class="math"&gt;\(y\)&lt;/span&gt;, &lt;span class="math"&gt;\(z\)&lt;/span&gt;. Complex &lt;span class="math"&gt;\(B\)&lt;/span&gt;: Draw a fifth point &lt;span class="math"&gt;\(w\)&lt;/span&gt;; draw a line connecting &lt;span class="math"&gt;\(c\)&lt;/span&gt; and &lt;span class="math"&gt;\(w\)&lt;/span&gt;; draw a line connecting &lt;span class="math"&gt;\(x\)&lt;/span&gt; to &lt;span class="math"&gt;\(c\)&lt;/span&gt; and connecting &lt;span class="math"&gt;\(y\)&lt;/span&gt; to &lt;span class="math"&gt;\(z\)&lt;/span&gt;. The intersection &lt;span class="math"&gt;\(A \cap B\)&lt;/span&gt; consists of &lt;span class="math"&gt;\(c\)&lt;/span&gt;, &lt;span class="math"&gt;\(y\)&lt;/span&gt;, &lt;span class="math"&gt;\(z\)&lt;/span&gt; and the two connecting lines.&lt;/p&gt;
&lt;p&gt;We can now construct an interesting simplicial complex: the Vietoris-Rips complex. Given a dataset consisting of &lt;span class="math"&gt;\(n\)&lt;/span&gt;-dimensional points, a metric (so we have distance), and a fixed value &lt;span class="math"&gt;\(\delta &amp;gt; 0\)&lt;/span&gt;, connect all pairs of points that are within &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; of each other. Whenever three or more points are connected, we additionally include the higher-dimensional simplex thus created. The collection of all such simplices is the Vietoris-Rips complex. By construction, requirements 1 and 2 are satisfied. (The proof for 2 probably uses triangle inequality: the intersection has to be within &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; and therefore we'd already have connected the dots.)&lt;/p&gt;
&lt;p&gt;How do we determine which value(s) of &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; create a complex that exhibits the underlying geometric structure of the data? We use persistence diagrams. A persistence diagram illustrates which topological features of a dataset persist as &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; varies. In particular, we consider the homology of the complex as &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; varies. Homology provides us with a formalized way to quantify the shape of a space in each dimension. For example, a solid torus has, modulo homotopy smooshing, one point, two loops, and one void. These values are called Betti numbers. They represent equivalence classes of points, loops, and voids.&lt;/p&gt;
&lt;p&gt;We are still on our way to understanding the persistence diagram. Let's consider all the classes of &lt;span class="math"&gt;\(n\)&lt;/span&gt;-dimensional "loops". As &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; increases from 0, classes will emerge and classes will disappear. The &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; value for which a class emerges is called its birth value &lt;span class="math"&gt;\(b\)&lt;/span&gt;, and the &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; value for which a class disappears is called its death value &lt;span class="math"&gt;\(d\)&lt;/span&gt;. For each class, we have a tuple &lt;span class="math"&gt;\((b,d)\)&lt;/span&gt;. What can we do with tuples? Graph them! This graph is the persistence diagram. Traditionally &lt;span class="math"&gt;\(b\)&lt;/span&gt; is plotted on the horizontal axis and &lt;span class="math"&gt;\(d\)&lt;/span&gt; is plotted on the vertical axis. The further a point is from the line &lt;span class="math"&gt;\(y=x\)&lt;/span&gt;, the longer it persists. Thus the data's noise lives near the diagonal and the data's signal lives above the diagonal (for many applications).&lt;/p&gt;
&lt;p&gt;Now that we have a handful (or maybe many more!) of significant &lt;span class="math"&gt;\((b,d)\)&lt;/span&gt; pairs for a given dataset, we can compare two datasets to determine how geometrically similar they are. We make this comparison by matching points in one persistence diagram with points in the other persistence diagram. Two such ways to measure the distance (as a single value!) between two persistence diagrams are the bottleneck distance and the Wasserstein distance.&lt;/p&gt;
&lt;p&gt;Do we know that this distance is useful? We do, due to the stability theorem. This theorem proves that the distance between two persistence diagrams is less than the distance between the two corresponding datasets.&lt;/p&gt;
&lt;h3&gt;degrees of freedom (what choices can we make)&lt;/h3&gt;
&lt;p&gt;a. How do we draw the complex? Vietoris-Rips or something else?&lt;/p&gt;
&lt;p&gt;b. How do we measure the distance between the points in the persistence diagram? Bottleneck distance? Wasserstein distance? etc.&lt;/p&gt;
&lt;p&gt;c. Which distance do we use? Euclidean distance is not always the best tool for the task! (Thanks to &lt;a href="https://people.clas.ufl.edu/hwagner/"&gt;Hubert Wagner&lt;/a&gt; for pointing this out!)&lt;/p&gt;
&lt;h3&gt;next up&lt;/h3&gt;
&lt;p&gt;barcodes, linear-algebra-based computation, filtrations, persistence homology modules, module as a direct sum of barcode lines&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category><category term="math"></category></entry><entry><title>git Hacks</title><link href="/posts/git-hacks.html" rel="alternate"></link><published>2022-08-25T00:00:00-04:00</published><updated>2022-08-25T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-08-25:/posts/git-hacks.html</id><summary type="html">&lt;h3&gt;configuration&lt;/h3&gt;
&lt;p&gt;Start the ssh agent (add this to your &lt;code&gt;~/.zshrc&lt;/code&gt;, for example):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following at the head of &lt;code&gt;~/.gitconfig&lt;/code&gt; in order to specify a git configuration per path. These are called &lt;em&gt;conditional includes&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[includeIf &amp;quot;gitdir:~/path/work/&amp;quot;]&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig-work&lt;/span&gt;
&lt;span class="k"&gt;[includeIf &amp;quot;gitdir:~/path/play/&amp;quot;]&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig-play&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Contents …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;configuration&lt;/h3&gt;
&lt;p&gt;Start the ssh agent (add this to your &lt;code&gt;~/.zshrc&lt;/code&gt;, for example):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following at the head of &lt;code&gt;~/.gitconfig&lt;/code&gt; in order to specify a git configuration per path. These are called &lt;em&gt;conditional includes&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[includeIf &amp;quot;gitdir:~/path/work/&amp;quot;]&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig-work&lt;/span&gt;
&lt;span class="k"&gt;[includeIf &amp;quot;gitdir:~/path/play/&amp;quot;]&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig-play&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Contents of &lt;code&gt;~/.gitconfig-work&lt;/code&gt; or &lt;code&gt;~/.gitconfig-play&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mail&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      
    &lt;span class="n"&gt;sshCommand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="err"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="n"&gt;id_ed25519-work&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IdentitiesOnly=yes&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;-F none&lt;/code&gt; specifies that &lt;code&gt;ssh&lt;/code&gt; shall not look any files, thus forcing (in theory) it to use the key specified with &lt;code&gt;-i&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But despite &lt;code&gt;-F none&lt;/code&gt;, &lt;code&gt;-v&lt;/code&gt; informed me it was still looking in &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;. So, I added &lt;code&gt;-o "IdentitiesOnly=yes"&lt;/code&gt; (see &lt;a href="https://linux.die.net/man/5/ssh_config"&gt;man pages&lt;/a&gt; here), which in practice does not look in my known hosts file.&lt;/p&gt;
&lt;h3&gt;debugging&lt;/h3&gt;
&lt;p&gt;List the source of each git configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --list --show-origin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unset credential helper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global --unset credential.helper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Show some in-scope git configurations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config user.email
git config user.username
git config core.sshCommand
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the full debugs logs of ssh to determine exactly where it's finding ssh keys:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;git uses your ssh key to identify you. Determine which user git is authenticating you as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -T git@github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also give it all the options you're providing when sshing to git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -i ~/.ssh/id_ed25519 -F none -o &lt;span class="s2"&gt;&amp;quot;IdentitiesOnly=yes&amp;quot;&lt;/span&gt; -T git@github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For other setups, rather than specifying the exact ssh key, you can set various &lt;code&gt;IdentityFile&lt;/code&gt; in &lt;code&gt;~/.ssh/config&lt;/code&gt;. It's reasonable practice to specify the host rather than use a wildcard:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Host *&lt;/span&gt;
&lt;span class="err"&gt;    AddKeysToAgent yes&lt;/span&gt;
&lt;span class="err"&gt;    UseKeychain yes&lt;/span&gt;
&lt;span class="err"&gt;    IdentityFile ~/.ssh/id_ed25519-work&lt;/span&gt;
&lt;span class="err"&gt;    IdentityFile ~/.ssh/id_ed25519-play&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="computers"></category></entry><entry><title>Site Hacks</title><link href="/posts/site-hacks.html" rel="alternate"></link><published>2022-08-25T00:00:00-04:00</published><updated>2022-08-25T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-08-25:/posts/site-hacks.html</id><content type="html">&lt;p&gt;Publish pelican site locally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pelican -r -l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="computers"></category></entry><entry><title>Who said this?</title><link href="/posts/who-said-this.html" rel="alternate"></link><published>2022-08-25T00:00:00-04:00</published><updated>2022-08-25T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-08-25:/posts/who-said-this.html</id><content type="html">&lt;p&gt;unnecessary foolishness is the consistency of a hobgoblin&lt;/p&gt;</content><category term="misc"></category><category term="literature"></category></entry><entry><title>Research Resources</title><link href="/posts/research-resources.html" rel="alternate"></link><published>2022-08-18T00:00:00-04:00</published><updated>2022-08-18T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-08-18:/posts/research-resources.html</id><summary type="html">&lt;h2&gt;TDA Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/2004.04108"&gt;Introductory Topological Data Analysis&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Apr 2020&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Dayten Sheffar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: high-level introduction to: metric topology, &lt;span class="math"&gt;\(p\)&lt;/span&gt;-norm, &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;-norm, abstract simplexes, simplicial complexes, homeomorphic and homotopy equivalence, nerve theorem, mapper algorithm, betti numbers, persistent homology&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pub.ist.ac.at/~edels/Papers/2016-B-01-PersDM.pdf"&gt;Persistent Homology&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Herbert Edelsbrunner and Dmitriy Morozov&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: glossary of all …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;TDA Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/2004.04108"&gt;Introductory Topological Data Analysis&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Apr 2020&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Dayten Sheffar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: high-level introduction to: metric topology, &lt;span class="math"&gt;\(p\)&lt;/span&gt;-norm, &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;-norm, abstract simplexes, simplicial complexes, homeomorphic and homotopy equivalence, nerve theorem, mapper algorithm, betti numbers, persistent homology&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pub.ist.ac.at/~edels/Papers/2016-B-01-PersDM.pdf"&gt;Persistent Homology&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Herbert Edelsbrunner and Dmitriy Morozov&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: glossary of all things persistent homology&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pub.ist.ac.at/~edels/Papers/2012-P-11-PHTheoryPractice.pdf"&gt;Persistent Homology: Theory and Practice&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Herbert Edelsbrunner, Dmitriy Morozov&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: persistent homology survey of methods and applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/1207.6437"&gt;Statistical topological data analysis using persistence landscapes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Jul 2012&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Peter Bubenik&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: introduces persistence landscapes to the literature&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TDA Theory: Stability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/2103.10723"&gt;Notes on an Elementary Proof for the Stability of Persistence Diagrams&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Mar 2021&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Primoz Skraba, Katharine Turner&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: these notes are a self-contained short proof of the stability of persistence diagrams; the background needed for &lt;a href="https://arxiv.org/abs/2006.16824"&gt;arxiv:2006.16824&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/2006.16824"&gt;Wasserstein Stability for Persistence Diagrams&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: June 2020&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Primoz Skraba, Katharine Turner&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/1809.09654"&gt;An algebraic Wasserstein distance for generalized persistence modules&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Sep 2018&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Peter Bubenik&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: persistence modules are the algebraic counterpart to persistence diagrams; defines the Wasserstein distance for persistence modules; proves that the distance of a persistence module and its persistence diagram agree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TDA Theory: Computation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://geometry.stanford.edu/papers/zc-cph-05/zc-cph-05.pdf"&gt;Computing Persistent Homology&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Nov 2004&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Afra Zomorodian and Gunnar Carlsson&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOI&lt;/strong&gt;: &lt;a href="https://doi.org/10.1007/s00454-004-1146-y"&gt;DOI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: the persistent homology of a filtered &lt;span class="math"&gt;\(d\)&lt;/span&gt;-dimensional simplicial complex is the standard homology of a graded module over a polynomial ring; gives an algorithm for computing individual persistent homology groups over an arbitrary PID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/2103.05608"&gt;Dory: Overcoming Barriers to Computing Persistent Homology&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Mar 2021&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Manu Aggarwal, Vipul Periwal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/2003.07989"&gt;GPU-Accelerated Computation of Vietoris-Rips Persistence Barcodes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Mar 2020&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Simon Zhang, Mengbai Xiao, Hao Wang&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TDA Applications&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/2102.09380"&gt;Topological data analysis of C. elegans locomotion and behavior&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Feb 2021&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Ashleigh Thomas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: uses a sliding-window embedding to turn time series data into a point cloud that remembers the temporal information; thorough and clear intro to persistence diagrams and persistence landscapes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://jmlr.org/papers/v21/20-345.html"&gt;Topology of Deep Neural Networks&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Apr 2020&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Gregory Naitzat, Andrey Zhitnikov, Lek-Heng Lim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Computer Science: Functional Programming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www2.cs.sfu.ca/CourseCentral/831/burton/Notes/July14/free.pdf"&gt;Theorems for free!&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: June 1989&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Philip Wadler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://homepages.inf.ed.ac.uk/wadler/papers/lineartaste/lineartaste-revised.pdf"&gt;A taste of linear logic&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: 1993&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Philip Wadler&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOI&lt;/strong&gt;: &lt;a href="https://doi.org/10.1007/3-540-57182-5_12"&gt;DOI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: an introduction to intuitionistic logic and linear logic; how they correspond to type systems for functional languages via the notion of 'Propositions as Type'&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf"&gt;Monads for functional programming&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: 1993&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Philip Wadler&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOI&lt;/strong&gt;: &lt;a href="https://doi.org/10.1007/978-3-662-02880-3_8"&gt;DOI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://simonmar.github.io/bib/papers/haxl-icfp14.pdf"&gt;There is no Fork: an Abstraction for Efficient, Concurrent, and Concise Data Access&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Sep 2014&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: functor concurrency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/desugaring-haskell-haskell16.pdf"&gt;Desugaring Haskell’s do-Notation into Applicative Operations&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Sep 2016&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: applicative functors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Computer Science: Parsing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2017/05/mison-vldb17.pdf"&gt;Mison: A Fast JSON Parser for Data Analytics&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: 2017&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: push down projections and filters into the parser&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.vldb.org/pvldb/vol11/p1576-palkar.pdf"&gt;Filter Before You Parse: Faster Analytics on Raw Data with Sparser&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Aug 2018&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: filter pre-parsing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Logic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lix.polytechnique.fr/~lutz/papers/medial-kurz.pdf"&gt;What could a Boolean category be?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Jul 2006&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Lutz Straßburger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1904.09828"&gt;Magic: The Gathering is Turing Complete&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Mar 2019&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Alex Churchill, Stella Biderman, Austin Herrick&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category><category term="math"></category></entry><entry><title>Test Latex Math Post</title><link href="/posts/test-latex-math-post.html" rel="alternate"></link><published>2022-08-18T00:00:00-04:00</published><updated>2022-08-18T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2022-08-18:/posts/test-latex-math-post.html</id><summary type="html">&lt;p&gt;This post is to test math&lt;/p&gt;
&lt;div class="math"&gt;$$x = y^z$$&lt;/div&gt;
&lt;p&gt;but can it do &lt;span class="math"&gt;\(i=n^{line}\)&lt;/span&gt; math?
&lt;/p&gt;
&lt;div class="math"&gt;$$\int_{foo}^{bar} \delta d\delta = \infty \Pi_i \Sigma 3$$&lt;/div&gt;
&lt;p&gt;another eqn&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = \int_{-\infty}^{\infty} \hat{f} (\Upsilon) e^{2\pi i x \xi}$$&lt;/div&gt;
&lt;p&gt;add some more text&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById …&lt;/script&gt;</summary><content type="html">&lt;p&gt;This post is to test math&lt;/p&gt;
&lt;div class="math"&gt;$$x = y^z$$&lt;/div&gt;
&lt;p&gt;but can it do &lt;span class="math"&gt;\(i=n^{line}\)&lt;/span&gt; math?
&lt;/p&gt;
&lt;div class="math"&gt;$$\int_{foo}^{bar} \delta d\delta = \infty \Pi_i \Sigma 3$$&lt;/div&gt;
&lt;p&gt;another eqn&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = \int_{-\infty}^{\infty} \hat{f} (\Upsilon) e^{2\pi i x \xi}$$&lt;/div&gt;
&lt;p&gt;add some more text&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category><category term="math"></category></entry><entry><title>Thoughts on LambdaConf 2016</title><link href="/posts/2016-03-26-lambdaconf.html" rel="alternate"></link><published>2016-03-26T00:00:00-04:00</published><updated>2016-03-26T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2016-03-26:/posts/2016-03-26-lambdaconf.html</id><summary type="html">&lt;p&gt;This article is written in response to the article &lt;a href="http://degoes.net/articles/lambdaconf-inclusion"&gt;Wrestling With Inclusion at LambdaConf&lt;/a&gt;. Twitter hashtag #lambdaconf.&lt;/p&gt;
&lt;p&gt;We need to understand the consequences of our decisions. You decide to take an action, and then consequences follow. In this case, a racist speaker was given a speaking slot at a tech …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is written in response to the article &lt;a href="http://degoes.net/articles/lambdaconf-inclusion"&gt;Wrestling With Inclusion at LambdaConf&lt;/a&gt;. Twitter hashtag #lambdaconf.&lt;/p&gt;
&lt;p&gt;We need to understand the consequences of our decisions. You decide to take an action, and then consequences follow. In this case, a racist speaker was given a speaking slot at a tech conference. That was the action. What are the consequences?&lt;/p&gt;
&lt;p&gt;Racism is not to be taken lightly. Period. Racist words, spoken or written, are detrimentally painful to their targets. You don’t just recover from being told you are subhuman. This isn’t a mild injury, and the cumulative effects of racism at the individual and the institutional level traumatize people and deny them entry into society. A racist speaker being given a speaking slot at a conference must be seen in this light.&lt;/p&gt;
&lt;p&gt;Now, it must also be acknowledged that there is fear and pain on all sides of this discussion. Racism stems from fear of the “other”, and this is often assumed to be fear of someone because they are different, but really it’s the fear that they are the same. If you define your identity as opposed to someone else’s, if you define whiteness as not-blackness or blackness as not-whiteness, then your identity is threatened when the other group is acknowledged to be similar to you. We hold our identities so near and dear that we often take measures that deny others humanity only so we don’t have to change. To be clear, I’m not advocating for color-blindness; I’m advocating that a strong notion of “other” births fear.&lt;/p&gt;
&lt;p&gt;And so I invite everyone to realize that you could have been born anyone, anywhere, at any time past or future. Who you are born is a roll of the die. If you think the situation you were born into has anything to do with you, you are wrong. As we grow, we make decisions that shape our identities, but that’s not what I’m talking about. I’m talking about infant you, fresh out, being held for the first time, naked, on your parent’s chest.&lt;/p&gt;
&lt;p&gt;But now we’ve all grown up, and we’ve all made decisions, and those decisions all have consequences. By giving an individual a speaking slot at a conference, you are excluding the group of people who refuse to be in the same room as that person. If you give a speaking slot to a Black Lives Matter activist, you are excluding the group of people who refuse be in the same room as them. If you give speaking slot to Yarvin, you are excluding the group of people who refuse to be in the same room as him, and it’s important to view this group of people in the context of systemic racism.&lt;/p&gt;
&lt;p&gt;Thus a conference can be viewed as the ever-shifting intersection of these groups of people, of these bubbles. Each speaker you allow or disallow shifts the intersection of these bubbles, thereby both including and excluding various people. It is naive to think an “everyone is allowed to speak” policy is the ultimately inclusive policy, because by including any one person, you necessarily exclude others. And so the question to the conference organizer becomes, what do I want the intersection of these bubbles at my conference to look like? If I accept that I must exclude some people, who is it most important for me to include?&lt;/p&gt;
&lt;p&gt;If I were organizing LambdaConf, I would not invite Yarvin to speak, because I would rather include the people who disagree with him than include the people who agree with him. And so the self-centered individual wonders, what if I get rejected from a conference because of my viewpoint? And guess what, this very well may happen! If a conference organizer decides that they want to include the people who will not attend if you do, then they can and will decide to exclude you. But the thing is, you can have a public discussion about this! You can stand up for yourself and your viewpoints and others will stand up for you. And ultimately you will need to choose between your viewpoint and membership in that community, without forgetting that communities can and do change. You must fight for membership in communities that reject you, while simultaneously creating communities that accept you.&lt;/p&gt;
&lt;p&gt;We define community by deciding who we most want to include. And we cannot include people who exclude those who we must include. Every community operates at this level. Every community is an ever shifting overlap of bubbles, and no individual will have membership everywhere. Where and how each community draws these lines is completely up to them, and no community will draw them in exactly the same way.&lt;/p&gt;
&lt;p&gt;Additionally, it should be pointed out that a community can decide whether it separates behavior outside that community from behavior within it. For example, a conference may accept a speaker on the grounds that they not discuss their moral viewpoints at the conference. Or, a conference may decide that morals cannot be separated from the individual, even if they agree to only talk about tech. Both of these decisions exclude people, and the outrage I see on both sides stems from the terrifying reality of exclusion and loneliness.&lt;/p&gt;
&lt;p&gt;Then the question remains, how do you disagree with a community that you are not allowed to join? How do you discuss ideas with people who disagree with you? Doesn’t ostracism make the divides between us even greater? In this situation, ostracism only recognizes a divide that is already there, deep in society. One could, in theory, view a tech conference as a place to build a bridge across the abyss, a place where people from all sides can come together and find common ground in technology. The problem is, the divide is too great even for this. You cannot just forget about racism for the day, when a prominent racist is sitting right in front of you.&lt;/p&gt;
&lt;p&gt;So I call to all people on all sides who have the desire and the willingness to have the hard conversations, to do so and to do so frequently. But we must always remember that some people do not wish to engage in such conversations, and that is their right. And as such, if someone says they don’t want to talk to you, the conversation is over. There are many issues along which people become divided, and the depths of those divides vary greatly. Each divide is unique, and some can be bridged successfully at a tech conference, some cannot.&lt;/p&gt;
&lt;p&gt;There is no censorship happening here, no impingement on free speech. The excluded person may still express their views at other conferences and in other communities, and you are still free to engage them individually in discussion. You can create a community and invite everyone, no restrictions, just know that everyone won’t show up. In the end, we must recognize that some communities are constructed to allow us, and others are constructed to reject us. Choose your viewpoints, and then shape a set of communities, or choose your communities, and then recognize that you must hold certain viewpoints. And then by all means, adapt, learn, and admit to being wrong! You can always change your mind.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Notions of Variance in Scala</title><link href="/posts/2014-06-19-scalavariance.html" rel="alternate"></link><published>2014-06-19T00:00:00-04:00</published><updated>2014-06-19T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2014-06-19:/posts/2014-06-19-scalavariance.html</id><content type="html">&lt;p&gt;Here is a &lt;a href="https://gist.github.com/alissapajer/50c912d739346c1f00dd"&gt;github gist&lt;/a&gt; with some exercises explaining variance of functors in Scala. Additionally, it explains variance of types over their type parameters.&lt;/p&gt;
&lt;p&gt;I also wrote up a &lt;a href="/images/FunctorMorphismPreservationProof.pdf"&gt;proof&lt;/a&gt; that a given functor implementation preserves morphism composition.&lt;/p&gt;</content><category term="misc"></category><category term="programming"></category></entry><entry><title>Haskell Fixity</title><link href="/posts/2014-03-15-haskellfixity.html" rel="alternate"></link><published>2014-03-15T00:00:00-04:00</published><updated>2014-03-15T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2014-03-15:/posts/2014-03-15-haskellfixity.html</id><summary type="html">&lt;p&gt;Let's consider some Haskell. Here's a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function will zip the two provided lists and then sum the pairs of elements, returning a single list of &lt;code&gt;Num&lt;/code&gt;. For example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;*Main&amp;gt; zipSum [1,2,3,4] [3,4]&lt;/span&gt;
&lt;span class="err"&gt;[4,6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great, so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's consider some Haskell. Here's a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function will zip the two provided lists and then sum the pairs of elements, returning a single list of &lt;code&gt;Num&lt;/code&gt;. For example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;*Main&amp;gt; zipSum [1,2,3,4] [3,4]&lt;/span&gt;
&lt;span class="err"&gt;[4,6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great, so what happens if we apply &lt;code&gt;zipSum&lt;/code&gt; as an infix function and also apply a list concatenation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;`zipSum`&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interesting, so it looks like &lt;code&gt;zipSum&lt;/code&gt; takes precedence over &lt;code&gt;(++)&lt;/code&gt;, when we've applied them both as infix operators. Example noted. Now let's write our own list concat function called &lt;code&gt;myConcat&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;myConcat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;myConcat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can perform "the same" function applications again, using our new &lt;code&gt;myConcat&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;`myConcat`&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ss"&gt;`zipSum`&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ummm, so what just happened? That is not the same result we computed last time. This time, the list concatenation took precedence. Thus, and this is surprising, &lt;code&gt;(++)&lt;/code&gt; and &lt;code&gt;myConcat&lt;/code&gt; are not acting equivalently in this seemingly equivalent situation.&lt;/p&gt;
&lt;p&gt;Now, let's take a step back into math and think about what it means for two functions to be equal. Two functions &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; are defined to be equal if they have the same domain, and for each element &lt;code&gt;x&lt;/code&gt; in their domain, &lt;code&gt;f(x) = g(x)&lt;/code&gt;. Now, consider our two functions &lt;code&gt;(++)&lt;/code&gt; and &lt;code&gt;myConcat&lt;/code&gt;. These functions have identical type signatures, and hence the same domain. And since &lt;code&gt;myConcat&lt;/code&gt; is effectively just a wrapping around &lt;code&gt;(++)&lt;/code&gt;, then for any lists &lt;code&gt;l1&lt;/code&gt; and &lt;code&gt;l2&lt;/code&gt; of the same type, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="ss"&gt;`myConcat`&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thus, by this definition of function equality, &lt;code&gt;myConcat&lt;/code&gt; and &lt;code&gt;(++)&lt;/code&gt; are equal functions. But we have just seen that, when applied as infix operators in conjunction with &lt;code&gt;zipSum&lt;/code&gt;, they do not operate equivalently! It seems our definition of a function isn't correct. Or that we're actually not dealing with functions. So what's going on?&lt;/p&gt;
&lt;p&gt;Well, the problem we're dealing with here is the inherent ambiguity of infix operators. By using a function as an infix operator, we're using it in a way that lambda calculus doesn't define. Hence we need to provide our own custom infix operator rules in order for infix operators to make sense.&lt;/p&gt;
&lt;p&gt;To evaluate an expression like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;4 + 5 * 6 * 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we need to first decide on some evaluation rules. For example, we could assume that all infix operators have the same precedence and that they are all left associative. In that case, the above expression would be evaluated as &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;(((4 + 5) * 6) * 7)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's one solution. But from the high level view of a function, that solution is really just as arbitrary as assigning a random fixity to every operator.&lt;/p&gt;
&lt;p&gt;Now it's worth noting that if we choose not to assume any rules when given a series of infix function applications, then the only sane thing left to do would be to assume that we can apply the operations in any order. But a simple example of numeric addition and multiplication shows us that this approach can trivially yield non-equal results from the same initial expresion. This cannot possibly be the correct solution.&lt;/p&gt;
&lt;p&gt;So even if we remove this infix ambiguity by defining a set of non-ambiguous infix evaluation rules, these rules are still arbitrary from the point of view of a function that only knows its type signature. Specifying the infix precedence and associativity of a function adds semantic meaning to a type signature that otherwise knew nothing about its implementation. In short, function behavior should not be governed by a secret fixity, not present in its type signature. (A language which can specify fixity in the type signature? Now you have my attention!)&lt;/p&gt;
&lt;p&gt;In all fairness, fixity isn't entirely secret. In ghci you can inquire about the fixity of any function using &lt;code&gt;:info&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;-- Defined in `GHC.Base&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;infixr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we learn that &lt;code&gt;(++)&lt;/code&gt; has right associativity with precedence level 5. Why is the associativity right, and not left or neutral? Recall that &lt;code&gt;(++)&lt;/code&gt; has time complexity that is linear in the length of its &lt;em&gt;first&lt;/em&gt; argument. A quick picture shows clearly that performing a series of &lt;code&gt;(++)&lt;/code&gt; infix applications is more efficient if you do so assuming right associativity. Thus, Haskell exposes an implementation detail of a function through that function's fixity. Yikes that seems dangerous. What if the implementation details change? This is the sort of hole that bugs crawl out of.&lt;/p&gt;
&lt;p&gt;Though, should it really be up to the programmer to know the time complexity of &lt;code&gt;(++)&lt;/code&gt; and write their code accordingly? In some situations it seems quite tempting to encode function implementation details with fixity, because then we can write &lt;code&gt;3 + 4 * 5&lt;/code&gt; and have it parse as &lt;code&gt;3 + (4 * 5)&lt;/code&gt;, as expected. But I will maintain my point that hardcoding implementation details or implementation semantics into the behavior of functions is impure and dangerous. In the simple cases, functions will do what we expect. In more complex code, we'll introduce bugs.&lt;/p&gt;
&lt;p&gt;I want types that are implementation agnostic and possible to reason about without additional information. Haskell functions used as infix operators don't provide that. So what world are we left in if&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ss"&gt;`op1`&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ss"&gt;`op2`&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;always generates a parser error? Well, that would be a world full of parentheses! The user would be required to add parentheses around their infix operators always, and without exception, until all ambiguity is resolved.&lt;/p&gt;
&lt;p&gt;Let's again consider the case of numeric addition and multiplication. These operations have a universally accepted precedence, which is entirely sensical when you think of &lt;code&gt;5 * 3&lt;/code&gt; as &lt;code&gt;5 + 5 + 5&lt;/code&gt;. So can't we at least maintain this precedence for these numeric operations? I say, nah. The Haskell functions &lt;code&gt;(+)&lt;/code&gt; and &lt;code&gt;(*)&lt;/code&gt; really should know nothing of their semantics. There is no reason &lt;code&gt;(*)&lt;/code&gt; should take precendece over &lt;code&gt;(+)&lt;/code&gt;, unless you consider the meaning of its implementaion in the larger context of math.&lt;/p&gt;
&lt;p&gt;So, lesson learned: equal functions can be defined with non-equal infix operators. (Recall the example of &lt;code&gt;zipSum&lt;/code&gt; used with both &lt;code&gt;(++)&lt;/code&gt; and &lt;code&gt;myConcat&lt;/code&gt;.) There is of course an obvious solution to this problem: never use Haskell infix operators. What do we lose? Readability. What do we gain? Correctness. And in all reality, a series of three or more infix applications really should be broken into shorter expressions anyway.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; The original version of &lt;code&gt;zipSum&lt;/code&gt; looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;summed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;summed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks to &lt;a href="https://twitter.com/puffnfresh"&gt;\@puffnfresh&lt;/a&gt; for pointing out that we can use &lt;code&gt;zipWith&lt;/code&gt; to implement this function.&lt;/p&gt;</content><category term="misc"></category><category term="programming"></category></entry><entry><title>Haskell Flip</title><link href="/posts/2014-02-22-haskellflip.html" rel="alternate"></link><published>2014-02-22T00:00:00-05:00</published><updated>2014-02-22T00:00:00-05:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2014-02-22:/posts/2014-02-22-haskellflip.html</id><summary type="html">&lt;p&gt;How can we change the order of the arguments to a function? After I answered this question, I realized it's actually a very odd question to ask.&lt;/p&gt;
&lt;p&gt;I'm working my way though &lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskell for Great Good&lt;/a&gt;, and in the &lt;a href="http://learnyouahaskell.com/higher-order-functions#curried-functions"&gt;Curried Functions&lt;/a&gt; section, the author describes the Haskell …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How can we change the order of the arguments to a function? After I answered this question, I realized it's actually a very odd question to ask.&lt;/p&gt;
&lt;p&gt;I'm working my way though &lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskell for Great Good&lt;/a&gt;, and in the &lt;a href="http://learnyouahaskell.com/higher-order-functions#curried-functions"&gt;Curried Functions&lt;/a&gt; section, the author describes the Haskell function &lt;code&gt;flip&lt;/code&gt; like so: &lt;em&gt;"Flip simply takes a function and returns a function that is like our original function, only the first two arguments are flipped."&lt;/em&gt; Without scrolling down further, I decided to implement &lt;code&gt;flip&lt;/code&gt; based on this sentence alone.&lt;/p&gt;
&lt;p&gt;I started with the type signature &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;myFlip :: (a -&amp;gt; b -&amp;gt; c) -&amp;gt; (b -&amp;gt; a -&amp;gt; c)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and my first attempt at implementation trailed off rather quickly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;myFlip f = ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Given only a function &lt;code&gt;f :: a -&amp;gt; b -&amp;gt; c&lt;/code&gt;, and nothing to apply to it, I had reached a dead end, so I decided to implement &lt;code&gt;f&lt;/code&gt;, and then &lt;code&gt;flip&lt;/code&gt; this implementation. I wanted the type variables &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; to be distinct so I could easily keep track of them. Here's my function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;myImpl :: Char -&amp;gt; Bool -&amp;gt; String&lt;/span&gt;
&lt;span class="err"&gt;myImpl char bool = char : (show bool)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now to flip it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;flippedMyImpl :: Bool -&amp;gt; Char -&amp;gt; String&lt;/span&gt;
&lt;span class="err"&gt;flippedMyImpl bool char = myImpl char bool&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, that is simple enough. The types lead way! And suddenly I realized that I just might have access to type variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. But I needed to implement the full signature of &lt;code&gt;myFlip&lt;/code&gt; using these specific types to fully understand. I combined &lt;code&gt;myImpl&lt;/code&gt; and &lt;code&gt;flippedMyImpl&lt;/code&gt; to produce&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;flipWithTypes :: (Char -&amp;gt; Bool -&amp;gt; String) -&amp;gt; Bool -&amp;gt; Char -&amp;gt; String&lt;/span&gt;
&lt;span class="err"&gt;flipWithTypes f bool char = f char bool&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My key realization was that I could remove the parentheses around &lt;code&gt;(Bool -&amp;gt; Char -&amp;gt; String)&lt;/code&gt; without changing the type signature. Once I did this, I realized that I had access to two more function arguments! Before removing the parentheses, my mind had written off &lt;code&gt;(b -&amp;gt; a -&amp;gt; c)&lt;/code&gt; as an impenetrable block.&lt;/p&gt;
&lt;p&gt;Once I wrote this last implementation, it was immediately clear that I had just written a non-parametric version of &lt;code&gt;myFlip&lt;/code&gt;. There is nothing special about the types I had chosen; they could just as easily be type variables. And so we arrive at our solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;myFlip :: (a -&amp;gt; b -&amp;gt; c) -&amp;gt; b -&amp;gt; a -&amp;gt; c&lt;/span&gt;
&lt;span class="err"&gt;myFlip f y x = f x y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To implement &lt;code&gt;myFlip&lt;/code&gt;, we needed to determine how the function would handle itself when fully applied. But our goal in writing &lt;code&gt;myFlip&lt;/code&gt; is to return another (partially applied) function with type &lt;code&gt;b -&amp;gt; a -&amp;gt; c&lt;/code&gt;. The key to the implementation of &lt;code&gt;flip&lt;/code&gt; that wasn't obvious at first is that we need to provide a full implementation in order to later partially apply it.&lt;/p&gt;
&lt;p&gt;In doing this exercise, my conception of a function changed. Now when I think of a function, I think of something linear, something in which each parameter must be applied in its prescribed order. And if that order is to be broken, another function must be applied to faciliate this change in order.&lt;/p&gt;
&lt;p&gt;Really, &lt;code&gt;flip&lt;/code&gt; is a formalization of how we handle the permutations of function application orders in Haskell. In math, we've seen that given a function &lt;code&gt;f(x,y,z)&lt;/code&gt;, we can consider &lt;code&gt;g(y,z) = f(3,y,z)&lt;/code&gt; or &lt;code&gt;h(y) = f(5,y,6)&lt;/code&gt; without any concern, because the order in which we provide values for our variables doesn't matter.&lt;/p&gt;
&lt;p&gt;But since in Haskell all functions take exactly one parameter, and thus multi-parameter functions are a semantic illusion, one must make explicit how to pass in parameters in a different order. Hence we arrive at the &lt;code&gt;flip&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;To tie up this post, it's odd, from a non-functional point of view, to ask how we can flip the order of function arguments because the question assumes that function arguments have an order in the first place! Though, once you recall the definitions of lambda calculus and think about different reduction rules, the fact that functions innately order their parameters seems almost intuitive. And then I realized: &lt;a href="http://en.wikipedia.org/wiki/Church%E2%80%93Rosser_theorem"&gt;Church-Rosser&lt;/a&gt;. And guess what? I've already written a &lt;a href="/posts/2013-03-26-churchrosser.html"&gt;blog post&lt;/a&gt; about that.&lt;/p&gt;</content><category term="misc"></category><category term="programming"></category></entry><entry><title>Category Theory at Strange Loop 2013</title><link href="/posts/2014-02-19-categorytheorystrangeloop.html" rel="alternate"></link><published>2014-02-19T00:00:00-05:00</published><updated>2014-02-19T00:00:00-05:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2014-02-19:/posts/2014-02-19-categorytheorystrangeloop.html</id><summary type="html">&lt;p&gt;&lt;img alt="diagram" src="/images/diagram.png" title="diagram"&gt;&lt;/p&gt;
&lt;p&gt;Back in September 2013 I gave a talk titled "Category Theory: An Abstraction for Anything" at the &lt;a href="https://thestrangeloop.com/"&gt;Strange Loop Conference&lt;/a&gt;. A few days ago, the &lt;a href="http://www.infoq.com/presentations/category-theory"&gt;video&lt;/a&gt; for my talk was released. &lt;/p&gt;
&lt;p&gt;Additionally, I wrote a &lt;a href="http://engineering.richrelevance.com/closing-the-loop-on-category-theory-polymorphism-currying-and-more/"&gt;blog post&lt;/a&gt; about this talk that was published on my employer's blog. &lt;/p&gt;
&lt;p&gt;Here's the talk …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="diagram" src="/images/diagram.png" title="diagram"&gt;&lt;/p&gt;
&lt;p&gt;Back in September 2013 I gave a talk titled "Category Theory: An Abstraction for Anything" at the &lt;a href="https://thestrangeloop.com/"&gt;Strange Loop Conference&lt;/a&gt;. A few days ago, the &lt;a href="http://www.infoq.com/presentations/category-theory"&gt;video&lt;/a&gt; for my talk was released. &lt;/p&gt;
&lt;p&gt;Additionally, I wrote a &lt;a href="http://engineering.richrelevance.com/closing-the-loop-on-category-theory-polymorphism-currying-and-more/"&gt;blog post&lt;/a&gt; about this talk that was published on my employer's blog. &lt;/p&gt;
&lt;p&gt;Here's the talk abstract, reproduced from the &lt;a href="https://thestrangeloop.com/sessions/category-theory-an-abstraction-for-anything"&gt;Strange Loop website&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Category theory provides a mathematically sound foundation on which we can create collections of objects and express morphisms between them. Together, along with a few simple rules, a collection of objects and morphisms forms a category to which we can apply many useful results, such as the uniqueness of an identity morphism. Furthermore, once we have a category in hand, we can formally explore the relationships it has with other categories, deducing powerful and practical abstractions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The power of category theory lies in the relative simplicity and accessibility of its definitions. From just a handful of straightforward concepts, we can formalize many concrete ideas such as directed acyclic graphs, currying, polymorphic functions, and Haskell itself. This talk will introduce the basics of category theory, while simultaneously diving into specific programming-related examples of categories, functors, and natural transformations. In addition to exploring profound and beautiful concepts, this talk aims to provide you with the tools necessary to recognize category-theoretical patterns in your own programming projects.&lt;/em&gt;&lt;/p&gt;</content><category term="misc"></category><category term="math"></category><category term="programming"></category></entry><entry><title>Blog Setup</title><link href="/posts/2014-02-08-blogsetup.html" rel="alternate"></link><published>2014-02-08T00:00:00-05:00</published><updated>2014-02-08T00:00:00-05:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2014-02-08:/posts/2014-02-08-blogsetup.html</id><summary type="html">&lt;p&gt;Edit 2021-05-01: This blog is no longer generated with Hackyll. It is generated with Pelican.&lt;/p&gt;
&lt;p&gt;When I started my search for a static site generator, I first came across &lt;a href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;. I'm not particularly excited about learning Ruby, but I am excited about learning Haskell.
This quickly led me to &lt;a href="http://jaspervdj.be/hakyll/"&gt;Hakyll …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Edit 2021-05-01: This blog is no longer generated with Hackyll. It is generated with Pelican.&lt;/p&gt;
&lt;p&gt;When I started my search for a static site generator, I first came across &lt;a href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;. I'm not particularly excited about learning Ruby, but I am excited about learning Haskell.
This quickly led me to &lt;a href="http://jaspervdj.be/hakyll/"&gt;Hakyll&lt;/a&gt;. Hakyll is easy to install with &lt;code&gt;cabal&lt;/code&gt;, though the first time I installed it I had an old version of &lt;code&gt;cabal&lt;/code&gt;, and thus installed an apparently very old version of Hakyll. I remedied this as follows: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ghc-pkg unregister hakyll
$ cabal update
$ cabal install hakyll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From there I followed the &lt;a href="http://jaspervdj.be/hakyll/tutorials.html"&gt;Tutorials&lt;/a&gt; on the Hakyll site and found them clear and up to date. Once I built the &lt;a href="http://jaspervdj.be/hakyll/tutorials/01-installation.html#building-the-example-site"&gt;Example Site&lt;/a&gt; locally, it was time to move the example code to &lt;a href="http://pages.github.com/"&gt;github pages&lt;/a&gt;. Blogging without version control was out of the question!&lt;/p&gt;
&lt;p&gt;The most confusing part of github pages is the &lt;a href="https://help.github.com/articles/user-organization-and-project-pages"&gt;difference&lt;/a&gt; between User Pages and Project Pages. The difference is mostly confusing because you can have a &lt;code&gt;gh-pages&lt;/code&gt; branch in the repo &lt;code&gt;username/username.github.io&lt;/code&gt;. In that case github needs to make an undocumented choice about which branch to use. I decided to use User Pages, which is why you can find my blog at &lt;code&gt;http://alissapajer.github.io&lt;/code&gt;. This means that content from my &lt;code&gt;master&lt;/code&gt; branch will be used to build my website. Here is where things get a bit tricky.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I need the contents of my site in the directory &lt;code&gt;alissapajer.github.io/&lt;/code&gt; on the &lt;code&gt;master&lt;/code&gt; branch. But Hakyll generates the website itself in &lt;code&gt;alissapajer.github.io/_site/&lt;/code&gt;, and places the Haskell code, markdown, and various other files in the top level directory. And of course I need to version control everything, generated and not!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I created a &lt;code&gt;source&lt;/code&gt; branch, which contains both the manually-created and the generated files. When I make a change to my website, I always commit on the &lt;code&gt;source&lt;/code&gt; branch, and I never manually edit files on &lt;code&gt;master&lt;/code&gt;. The idea is that &lt;code&gt;source&lt;/code&gt; will contain all of my code, and &lt;code&gt;master&lt;/code&gt; will contain just the generated files. Now all we need to do is to copy the contents of the &lt;code&gt;_site/&lt;/code&gt; directory to the &lt;code&gt;master&lt;/code&gt; branch. &lt;/p&gt;
&lt;p&gt;To perform this copy, I use &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; as follows, run from the &lt;code&gt;source&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;_site&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;commit message&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is an optional flag to push to &lt;code&gt;master&lt;/code&gt;, but I have been pushing manually so I can review the changes first. And that's it! The only thing I still need to do is the redirect to a domain I own. This is done using a &lt;code&gt;CNAME&lt;/code&gt; file on the &lt;code&gt;master&lt;/code&gt; branch. Since my &lt;code&gt;master&lt;/code&gt; branch is auto-generated I'll need to add this &lt;code&gt;CNAME&lt;/code&gt; in such a way that it's not deleted when I commit to &lt;code&gt;master&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The only weird thing is that &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt; will permanently diverge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While editing the webiste, I run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./site watch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command registers changes to the &lt;code&gt;_site/&lt;/code&gt; directory and publishes the up-to-date website to &lt;code&gt;http://127.0.0.1:8000/&lt;/code&gt;. Very useful for immediate feedback!&lt;/p&gt;
&lt;p&gt;Also, Hakyll allows you to write all your blog posts in markdown. I've found this &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown Cheatsheet&lt;/a&gt; essential.&lt;/p&gt;</content><category term="misc"></category><category term="computers"></category></entry><entry><title>Site Properties</title><link href="/posts/2014-02-03-siteproperties.html" rel="alternate"></link><published>2014-02-03T00:00:00-05:00</published><updated>2014-02-03T00:00:00-05:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2014-02-03:/posts/2014-02-03-siteproperties.html</id><content type="html">&lt;p&gt;This site contains all the things that don't contain themselves.&lt;/p&gt;</content><category term="misc"></category><category term="math"></category><category term="literature"></category></entry><entry><title>Insights into Church-Rosser</title><link href="/posts/lambdacalc.html" rel="alternate"></link><published>2013-03-26T00:00:00-04:00</published><updated>2013-03-26T00:00:00-04:00</updated><author><name>Alissa Pajer</name></author><id>tag:None,2013-03-26:/posts/lambdacalc.html</id><summary type="html">&lt;p&gt;Untyped lambda calculus is powerful. In fact, every computable function can be encoded into lambda calculus, and thus so can every bit of Scala code you've ever written. Though, anything more complicated than your basic combinator would be almost indecipherable in its lambda calculus form. As an example, here's what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Untyped lambda calculus is powerful. In fact, every computable function can be encoded into lambda calculus, and thus so can every bit of Scala code you've ever written. Though, anything more complicated than your basic combinator would be almost indecipherable in its lambda calculus form. As an example, here's what the addition combinator for the Church numerals &lt;code&gt;c_n = λfx.fn(x)&lt;/code&gt; looks like in lambda calculus: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;A+ = λxypq.xp(ypq)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At first glance it's by no means obvious that you're looking at a way to add natural numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introductory Definitions:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we jump into some more examples, let's step back a minute so I can provide a quick and basic introduction to untyped lambda calculus. The rules are easily accessible, and given that lambda calculus is Turing complete, their simplicity astounds me. (As a side note, because cellular automata are really cool, Conway's Game of Life is another easily definable Turing complete system.)&lt;/p&gt;
&lt;p&gt;Now, as promised, the introduction: We define the set &lt;code&gt;𝚲&lt;/code&gt; inductively as follows. Let &lt;code&gt;V&lt;/code&gt; be a set of variables &lt;code&gt;v'&lt;/code&gt;, &lt;code&gt;v''&lt;/code&gt;, etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;(i) If x ∈ V, then x ∈ 𝚲.&lt;/span&gt;
&lt;span class="err"&gt;(ii) If M,N ∈ 𝚲, then MN ∈ 𝚲.&lt;/span&gt;
&lt;span class="err"&gt;(iii) If x ∈ V and M ∈ 𝚲, then λx.M ∈ 𝚲.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In (ii), &lt;code&gt;MN&lt;/code&gt; denotes application, and you should think of &lt;code&gt;M&lt;/code&gt; as a method applied to &lt;code&gt;N&lt;/code&gt;. In (iii), the syntax &lt;code&gt;λx.M&lt;/code&gt; denotes an abstraction, i.e. a function &lt;code&gt;x -&amp;gt; M&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; is not required to depend on &lt;code&gt;x&lt;/code&gt;. The most interesting terms in lambda calculus will include an abstraction followed by an application, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;λ&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;N&lt;/code&gt; is substituted for every free instance of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;M&lt;/code&gt;. This is known formally as β-reduction. In psuedo lambda calculus, (psuedo because integers are not terms in &lt;code&gt;V&lt;/code&gt;), we can consider the example &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;(λx.(2*x + 3))4 = 2*4 + 3 = 11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Some Intuitions:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So what's the benefit of thinking about lambda calculus? For me, lambda calculus provides the structure to represent the core of what a function really is: a rule that gets us from one bit of knowledge to another. And if we want to prove something about functions (functions in a generic sense), lambda calculus is the perfect place to come. So what should we prove? Well, intuitively we'd hope that, no matter the strategy (e.g. call by name, call by value, etc.) we use to evaluate our function, we obtain the same result. But wait! Can this always be true? What if our function is an ill-thought-out recursion that loops until we overflow the stack? Can we really guarantee that every call to a function will return a unique result, no matter what strategy we use to evaluate it? The answer is yes, with an added assumption.&lt;/p&gt;
&lt;p&gt;To understand what this assumption should be, consider the famous &lt;code&gt;Ω&lt;/code&gt;-combinator: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Ω = (λx.xx)(λx.xx)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Furthermore consider the lambda term &lt;code&gt;(λx.z)Ω&lt;/code&gt;. If we evaluate this term using a call-by-name strategy, then it's simply equal to the constant &lt;code&gt;z&lt;/code&gt;, since &lt;code&gt;λx.z&lt;/code&gt; is a constant function. But if we use a call-by-value strategy, then we'll never be able to further reduce it, since when we apply &lt;code&gt;λx.xx&lt;/code&gt; to itself we again obtain &lt;code&gt;Ω&lt;/code&gt;. So what we really want to prove is this: If we β-reduce a lambda term until we cannot reduce it any further, then that final reduced term is unique. Said more formally: If a lambda term has a normal form, then that normal form is unique.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introduction to Church-Rosser:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ChurchRosserRight" src="/images/ChurchRosser1.png" title="ChurchRosser1"&gt;
In summary, we cannot just pick an evaluation strategy and expect it to yield the same results as all other evaluation strategies, because, as the &lt;code&gt;Ω&lt;/code&gt;-combinator example showed us, a given evaluation strategy may never terminate. But, there is something we can prove for certain: a lambda term has at most one normal form. In order to prove this, we'll outline the proof of a more general theorem, known as the Church-Rosser Theorem. In picture form, it looks like the image to the right, where solid arrows are assumptions and dotted arrows are to be proven.&lt;/p&gt;
&lt;p&gt;In word form it states: If a term &lt;code&gt;M&lt;/code&gt; β-reduces to two terms &lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N2&lt;/code&gt;, then there exists some &lt;code&gt;N3&lt;/code&gt; such that &lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N2&lt;/code&gt; each β-reduce to it.&lt;/p&gt;
&lt;p&gt;Given Church-Rosser, our desired statement follows directly. If we let &lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N2&lt;/code&gt; in the diagram above be distinct normal forms of &lt;code&gt;M&lt;/code&gt;, then by Church-Rosser there exists some &lt;code&gt;N3&lt;/code&gt; such that &lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N2&lt;/code&gt; each β-reduce to it. But a normal form term can only β-reduce to itself, and thus &lt;code&gt;N1 = L&lt;/code&gt; and &lt;code&gt;N2 = L&lt;/code&gt;. Thus &lt;code&gt;M&lt;/code&gt; has at most one normal form, since &lt;code&gt;N1 = N2&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Interestingly, we can also use Church-Rosser to prove the consistency of lambda calculus, that is, that true does not equal false. We define: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;T = λxy.x&lt;/span&gt;
&lt;span class="err"&gt;F = λxy.y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; are written as an iterated abstraction, meaning that the abstraction is one of multiple variables (in this case &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;). Iterated abstraction is right associative; for example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;λxyz.xyz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is shorthand for&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;λx.(λy.(λz.xyz))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now to understand these definitions, if &lt;code&gt;K&lt;/code&gt; is a lambda term that equals either &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt;, the lambda term &lt;code&gt;KPQ&lt;/code&gt; is a way to represent “if &lt;code&gt;K&lt;/code&gt; then &lt;code&gt;P&lt;/code&gt; else &lt;code&gt;Q&lt;/code&gt;”. If &lt;code&gt;T = F&lt;/code&gt;, then we’d be able to perform a series of reductions connecting &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt;. But since &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; are both normal forms, we cannot perform such reductions. Thus &lt;code&gt;T&lt;/code&gt; does not equal &lt;code&gt;F&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strip Lemma Basics:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ChurchRosserRight" src="/images/ChurchRosser2.png" title="ChurchRosser2"&gt;
Now in order to prove Church-Rosser, we'll prove a lemma first, namely the Strip Lemma. This lemma states that, if &lt;code&gt;M&lt;/code&gt; β-reduces to &lt;code&gt;N1&lt;/code&gt; in a single step, and &lt;code&gt;M&lt;/code&gt; β-reduces to &lt;code&gt;N2&lt;/code&gt; in any finite number of steps, there exists an &lt;code&gt;N3&lt;/code&gt; such that &lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N2&lt;/code&gt; each β-reduce to it. In diagram form, we have the diagram to the right, where a single arrow represents a single β-reduction, and a double arrow represents any finite number of β-reductions. &lt;/p&gt;
&lt;p&gt;Note that once we've proven the Strip Lemma, Church-Rosser follows immediately by induction on the natural numbers. (First prove the statement for &lt;code&gt;n=1&lt;/code&gt;. Then prove that if the statement holds for an arbitrary &lt;code&gt;n&lt;/code&gt;, it holds for &lt;code&gt;n+1&lt;/code&gt;.) To see this visually, imagine filling in the Church-Rosser diagram with these strips. &lt;/p&gt;
&lt;p&gt;Proceeding with the proof of the Strip Lemma, the correct question to ask is, how do we obtain a candidate &lt;code&gt;N3&lt;/code&gt;? Well, we know that &lt;code&gt;M&lt;/code&gt; β-reduces to &lt;code&gt;N1&lt;/code&gt; in a single step, so we'll consider this redex and mark it in &lt;code&gt;M&lt;/code&gt;. Now as we perform the multiple reductions on &lt;code&gt;M&lt;/code&gt; that ultimately reduce to &lt;code&gt;N2&lt;/code&gt;, we track this marked lambda term until we reach &lt;code&gt;N2&lt;/code&gt;. We now perform the β-reduction on this marked term in &lt;code&gt;N2&lt;/code&gt;, and that produces our candidate &lt;code&gt;N3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's make this idea of marking more formal with some notation. Specifically, to keep track of a certain redex, we'll underline it like this: &lt;code&gt;(&lt;ins&gt;λ&lt;/ins&gt;x.M)N&lt;/code&gt;, and we'll keep that lambda underlined until we β-reduce it. With this new notation, here’s an example of the Strip Lemma with actual lambda terms. (We’ll introduce &lt;code&gt;φ&lt;/code&gt; in a couple of paragraphs; for now just think of it as a β-reduction.)&lt;/p&gt;
&lt;p&gt;&lt;img alt="ChurchRosser3" src="/images/ChurchRosser3.png" title="ChurchRosser3"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Details of the Proof:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given that we now allow underlined lambdas in our set of allowed terms, what does this new set look like formally? Let's call it &lt;code&gt;&lt;ins&gt;𝚲&lt;/ins&gt;&lt;/code&gt;. We'll define it inductively, as we defined &lt;code&gt;𝚲&lt;/code&gt; earlier. The first three parts of the definition will be analogous to before, defining variables, application, and abstraction. In the fourth part we will include underlined lambdas only in the case when we have an abstraction followed by an application. This is because the only lambda-terms we need to trace are ones we know will be β-reduced.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(i) If x ∈ V, then x ∈ &lt;ins&gt;𝚲&lt;/ins&gt;.
(ii) If M,N ∈ &lt;ins&gt;𝚲&lt;/ins&gt;, then MN ∈ &lt;ins&gt;𝚲&lt;/ins&gt;.
(iii) If x ∈ V and M ∈ &lt;ins&gt;𝚲&lt;/ins&gt;, then λx.M ∈ &lt;ins&gt;𝚲&lt;/ins&gt;. 
(iv) If x ∈ V and M, N ∈ &lt;ins&gt;𝚲&lt;/ins&gt;, then (&lt;ins&gt;λ&lt;/ins&gt;x.M)N ∈ &lt;ins&gt;𝚲&lt;/ins&gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consider the following diagram. Note that the front rectangle is the same as the diagram in the statement of the Strip Lemma. The other terms, namely &lt;code&gt;M'&lt;/code&gt; and &lt;code&gt;N2'&lt;/code&gt;, we construct for purposes of the proof.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ChruchRosser4" src="/images/ChurchRosser4.png" title="ChurchRosser4"&gt;&lt;/p&gt;
&lt;p&gt;We construct &lt;code&gt;M'&lt;/code&gt; to be equivalent to &lt;code&gt;M&lt;/code&gt;, except that in it we underlined the &lt;code&gt;λ&lt;/code&gt; that was reduced to obtain &lt;code&gt;N1&lt;/code&gt;. The function &lt;code&gt;ψ: &lt;ins&gt;𝚲&lt;/ins&gt; -&amp;gt; 𝚲&lt;/code&gt; simply erases all underlines, so that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ψ((&lt;ins&gt;λ&lt;/ins&gt;x.M)N) = (λx.ψ(M))ψ(N)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now apply beta-reductions to &lt;code&gt;M'&lt;/code&gt;, analogous to those applied to &lt;code&gt;M&lt;/code&gt;, in order to obtain &lt;code&gt;N2'&lt;/code&gt;. And now to formally obtain &lt;code&gt;N3&lt;/code&gt;, we apply the function &lt;code&gt;φ: &lt;ins&gt;𝚲&lt;/ins&gt; -&amp;gt; 𝚲&lt;/code&gt; to &lt;code&gt;N2'&lt;/code&gt;. And what is &lt;code&gt;φ&lt;/code&gt;? &lt;code&gt;φ&lt;/code&gt; is exactly what you'd expect: a function that β-reduces all underlined terms and keeps all others the same, meaning that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;φ((&lt;ins&gt;λ&lt;/ins&gt;x.M)N) = φ(M)[x := φ(N)]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our candidate &lt;code&gt;N3&lt;/code&gt;, we only need to prove that we can draw solid lines in place of the dotted ones. I will outline a proof showing that &lt;code&gt;N2&lt;/code&gt; β-reduces to &lt;code&gt;N3&lt;/code&gt; and will leave the other part of the proof as an exercise for the reader. We will outline a proof of the following diagram, which is the front triangle in the previous diagram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ChurchRosser5" src="/images/ChurchRosser5.png" title="ChurchRosser5"&gt;&lt;/p&gt;
&lt;p&gt;In order to prove this, we will use the method of structural induction. Recall that initially we constructed &lt;code&gt;𝚲&lt;/code&gt; inductively. Thus in order to prove something general about all elements of &lt;code&gt;𝚲&lt;/code&gt;, we can use an induction technique that mimics the way in which we define &lt;code&gt;𝚲&lt;/code&gt;. This is called induction on the structure of &lt;code&gt;𝚲&lt;/code&gt;. Though note that in our case, &lt;code&gt;A ∈ &lt;ins&gt;𝚲&lt;/ins&gt;&lt;/code&gt;, so we'll use induction on the structure of &lt;code&gt;&lt;ins&gt;𝚲&lt;/ins&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, the base case:&lt;/p&gt;
&lt;p&gt;(i) Let &lt;code&gt;A = x&lt;/code&gt; for some &lt;code&gt;x ∈ V&lt;/code&gt;. Then &lt;code&gt;ψ(x) = x&lt;/code&gt; and &lt;code&gt;φ(x) = x&lt;/code&gt;. And thus since &lt;code&gt;x&lt;/code&gt; β-reduces to &lt;code&gt;x&lt;/code&gt;, we're done.&lt;/p&gt;
&lt;p&gt;For the next three cases, we assume the statement holds for the individual terms in &lt;code&gt;&lt;ins&gt;𝚲&lt;/ins&gt;&lt;/code&gt;, and prove that it holds for their application (or abstraction).&lt;/p&gt;
&lt;p&gt;(ii) Let &lt;code&gt;A = PQ&lt;/code&gt; for &lt;code&gt;P, Q ∈ V&lt;/code&gt;. Assume that &lt;code&gt;ψ(P)&lt;/code&gt; β-reduces to &lt;code&gt;φ(P)&lt;/code&gt; and that &lt;code&gt;ψ(Q)&lt;/code&gt; β-reduces to &lt;code&gt;φ(Q)&lt;/code&gt;. By the definitions of &lt;code&gt;ψ&lt;/code&gt; and &lt;code&gt;φ&lt;/code&gt;, show that &lt;code&gt;ψ(PQ)&lt;/code&gt; β-reduces to &lt;code&gt;φ(PQ)&lt;/code&gt;.
(iii) Let &lt;code&gt;A = λx.P&lt;/code&gt; for &lt;code&gt;P ∈ V&lt;/code&gt;. Assume that &lt;code&gt;ψ(P)&lt;/code&gt; β-reduces to &lt;code&gt;φ(P)&lt;/code&gt;. Using the definitions, show that &lt;code&gt;ψ(λx.P)&lt;/code&gt; β-reduces to &lt;code&gt;φ(λx.P)&lt;/code&gt;
(iv) Let &lt;code&gt;A = (&lt;ins&gt;λ&lt;/ins&gt;x.P)Q&lt;/code&gt; for &lt;code&gt;P, Q ∈ V&lt;/code&gt;. Assume the statement holds for &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt;. Show that &lt;code&gt;ψ(A)&lt;/code&gt; β-reduces to &lt;code&gt;φ(A)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And that's the outline of the proof of the Strip Lemma! &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In summary, we gave the definition for a lambda-term, considered the &lt;code&gt;Ω&lt;/code&gt;-combinator as an example of a lambda-term without a normal form, and outlined a proof of the Church-Rosser Theorem. So what does Church-Rosser tell us? If a term has a normal form, then that normal form is unique. This means that if we evaluate a function using two different strategies, the results will be equal. Of course, this doesn't guarantee that every evaluation strategy will terminate. But one thing we know for certain: if we do obtain a result, then that result is unique. &lt;/p&gt;</content><category term="misc"></category><category term="math"></category></entry></feed>