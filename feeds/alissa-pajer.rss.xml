<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Alissa Pajer's Blog - Alissa Pajer</title><link>/</link><description></description><lastBuildDate>Tue, 08 Nov 2022 00:00:00 -0500</lastBuildDate><item><title>Slices of Topology (Homology!)</title><link>/posts/slices-of-topology-homology.html</link><description>&lt;h1&gt;Slices of Topology&lt;/h1&gt;
&lt;p&gt;No matter how you slice it and dice it, you get out the same information. Well, that's not exactly true. But I'll show you one way you can look at individual slices of a shape in order to determine its overall topology.&lt;/p&gt;
&lt;h2&gt;Set Up&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Torus" src="/images/pyramid/torus.jpg" title="torus" width="25%"&gt;&lt;/p&gt;
&lt;p&gt;This is basically …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Tue, 08 Nov 2022 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2022-11-08:/posts/slices-of-topology-homology.html</guid><category>misc</category><category>math</category></item><item><title>5x5 Grids of English Words</title><link>/posts/5x5-grids-of-english-words.html</link><description>&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Here's an example of a valid 5x5 grid. It contains 10 English words (5 across words and 5 down words).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;a w a r e&lt;/span&gt;
&lt;span class="err"&gt;m o l a l&lt;/span&gt;
&lt;span class="err"&gt;a v o i d&lt;/span&gt;
&lt;span class="err"&gt;s e n s e&lt;/span&gt;
&lt;span class="err"&gt;s n e e r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This project aims …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Fri, 14 Oct 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2022-10-14:/posts/5x5-grids-of-english-words.html</guid><category>misc</category><category>programming</category></item><item><title>Math Defintions</title><link>/posts/math-defintions.html</link><description>&lt;p&gt;&lt;em&gt;(In Progress Eternally)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;algebra&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;binary operation&lt;/em&gt; on a set &lt;span class="math"&gt;\(S\)&lt;/span&gt; is a pairwise operation &lt;span class="math"&gt;\(S \times S \rightarrow S\)&lt;/span&gt;. The set is &lt;em&gt;closed&lt;/em&gt; under the operation.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;semigroup&lt;/em&gt; is a set of elements and an associative binary operation operating on the set.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;monoid&lt;/em&gt; is a semigroup with an …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 27 Aug 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2022-08-27:/posts/math-defintions.html</guid><category>misc</category><category>math</category></item><item><title>Topological Data Analysis Intro</title><link>/posts/topological-data-analysis-intro.html</link><description>&lt;h3&gt;summary&lt;/h3&gt;
&lt;p&gt;Start with some points. Determine a rule for incrementally connecting more and more of the points with lines, planes, solids, and so on. As points become connected, geometric structure emerges. As even more points become connected, geometric structure disappears. We quantify this structure, group it into classes, and observe …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Fri, 26 Aug 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2022-08-26:/posts/topological-data-analysis-intro.html</guid><category>misc</category><category>math</category></item><item><title>git Hacks</title><link>/posts/git-hacks.html</link><description>&lt;h3&gt;configuration&lt;/h3&gt;
&lt;p&gt;Start the ssh agent (add this to your &lt;code&gt;~/.zshrc&lt;/code&gt;, for example):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following at the head of &lt;code&gt;~/.gitconfig&lt;/code&gt; in order to specify a git configuration per path. These are called &lt;em&gt;conditional includes&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[includeIf &amp;quot;gitdir:~/path/work/&amp;quot;]&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig-work&lt;/span&gt;
&lt;span class="k"&gt;[includeIf &amp;quot;gitdir:~/path/play/&amp;quot;]&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig-play&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Contents …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Thu, 25 Aug 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2022-08-25:/posts/git-hacks.html</guid><category>misc</category><category>computers</category></item><item><title>Site Hacks</title><link>/posts/site-hacks.html</link><description>&lt;p&gt;Publish pelican site locally:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;pelican -r -l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Thu, 25 Aug 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2022-08-25:/posts/site-hacks.html</guid><category>misc</category><category>computers</category></item><item><title>Who said this?</title><link>/posts/who-said-this.html</link><description>&lt;p&gt;unnecessary foolishness is the consistency of a hobgoblin&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Thu, 25 Aug 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2022-08-25:/posts/who-said-this.html</guid><category>misc</category><category>literature</category></item><item><title>Research Resources</title><link>/posts/research-resources.html</link><description>&lt;h2&gt;TDA Background&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/abs/2004.04108"&gt;Introductory Topological Data Analysis&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: Apr 2020&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Dayten Sheffar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: high-level introduction to: metric topology, &lt;span class="math"&gt;\(p\)&lt;/span&gt;-norm, &lt;span class="math"&gt;\(\infty\)&lt;/span&gt;-norm, abstract simplexes, simplicial complexes, homeomorphic and homotopy equivalence, nerve theorem, mapper algorithm, betti numbers, persistent homology&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pub.ist.ac.at/~edels/Papers/2016-B-01-PersDM.pdf"&gt;Persistent Homology&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;author&lt;/strong&gt;: Herbert Edelsbrunner and Dmitriy Morozov&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;summary&lt;/strong&gt;: glossary of all …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Thu, 18 Aug 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2022-08-18:/posts/research-resources.html</guid><category>misc</category><category>math</category></item><item><title>Test Latex Math Post</title><link>/posts/test-latex-math-post.html</link><description>&lt;p&gt;This post is to test math&lt;/p&gt;
&lt;div class="math"&gt;$$x = y^z$$&lt;/div&gt;
&lt;p&gt;but can it do &lt;span class="math"&gt;\(i=n^{line}\)&lt;/span&gt; math?
&lt;/p&gt;
&lt;div class="math"&gt;$$\int_{foo}^{bar} \delta d\delta = \infty \Pi_i \Sigma 3$$&lt;/div&gt;
&lt;p&gt;another eqn&lt;/p&gt;
&lt;div class="math"&gt;$$f(x) = \int_{-\infty}^{\infty} \hat{f} (\Upsilon) e^{2\pi i x \xi}$$&lt;/div&gt;
&lt;p&gt;add some more text&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById …&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Thu, 18 Aug 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2022-08-18:/posts/test-latex-math-post.html</guid><category>misc</category><category>math</category></item><item><title>Thoughts on LambdaConf 2016</title><link>/posts/2016-03-26-lambdaconf.html</link><description>&lt;p&gt;This article is written in response to the article &lt;a href="http://degoes.net/articles/lambdaconf-inclusion"&gt;Wrestling With Inclusion at LambdaConf&lt;/a&gt;. Twitter hashtag #lambdaconf.&lt;/p&gt;
&lt;p&gt;We need to understand the consequences of our decisions. You decide to take an action, and then consequences follow. In this case, a racist speaker was given a speaking slot at a tech …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2016-03-26:/posts/2016-03-26-lambdaconf.html</guid><category>misc</category></item><item><title>Notions of Variance in Scala</title><link>/posts/2014-06-19-scalavariance.html</link><description>&lt;p&gt;Here is a &lt;a href="https://gist.github.com/alissapajer/50c912d739346c1f00dd"&gt;github gist&lt;/a&gt; with some exercises explaining variance of functors in Scala. Additionally, it explains variance of types over their type parameters.&lt;/p&gt;
&lt;p&gt;I also wrote up a &lt;a href="/images/FunctorMorphismPreservationProof.pdf"&gt;proof&lt;/a&gt; that a given functor implementation preserves morphism composition.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Thu, 19 Jun 2014 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2014-06-19:/posts/2014-06-19-scalavariance.html</guid><category>misc</category><category>programming</category></item><item><title>Haskell Fixity</title><link>/posts/2014-03-15-haskellfixity.html</link><description>&lt;p&gt;Let's consider some Haskell. Here's a function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;zipSum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zipWith&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function will zip the two provided lists and then sum the pairs of elements, returning a single list of &lt;code&gt;Num&lt;/code&gt;. For example: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;*Main&amp;gt; zipSum [1,2,3,4] [3,4]&lt;/span&gt;
&lt;span class="err"&gt;[4,6]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great, so …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 15 Mar 2014 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2014-03-15:/posts/2014-03-15-haskellfixity.html</guid><category>misc</category><category>programming</category></item><item><title>Haskell Flip</title><link>/posts/2014-02-22-haskellflip.html</link><description>&lt;p&gt;How can we change the order of the arguments to a function? After I answered this question, I realized it's actually a very odd question to ask.&lt;/p&gt;
&lt;p&gt;I'm working my way though &lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskell for Great Good&lt;/a&gt;, and in the &lt;a href="http://learnyouahaskell.com/higher-order-functions#curried-functions"&gt;Curried Functions&lt;/a&gt; section, the author describes the Haskell …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 22 Feb 2014 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2014-02-22:/posts/2014-02-22-haskellflip.html</guid><category>misc</category><category>programming</category></item><item><title>Category Theory at Strange Loop 2013</title><link>/posts/2014-02-19-categorytheorystrangeloop.html</link><description>&lt;p&gt;&lt;img alt="diagram" src="/images/diagram.png" title="diagram"&gt;&lt;/p&gt;
&lt;p&gt;Back in September 2013 I gave a talk titled "Category Theory: An Abstraction for Anything" at the &lt;a href="https://thestrangeloop.com/"&gt;Strange Loop Conference&lt;/a&gt;. A few days ago, the &lt;a href="http://www.infoq.com/presentations/category-theory"&gt;video&lt;/a&gt; for my talk was released. &lt;/p&gt;
&lt;p&gt;Additionally, I wrote a &lt;a href="http://engineering.richrelevance.com/closing-the-loop-on-category-theory-polymorphism-currying-and-more/"&gt;blog post&lt;/a&gt; about this talk that was published on my employer's blog. &lt;/p&gt;
&lt;p&gt;Here's the talk …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Wed, 19 Feb 2014 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2014-02-19:/posts/2014-02-19-categorytheorystrangeloop.html</guid><category>misc</category><category>math</category><category>programming</category></item><item><title>Blog Setup</title><link>/posts/2014-02-08-blogsetup.html</link><description>&lt;p&gt;Edit 2021-05-01: This blog is no longer generated with Hackyll. It is generated with Pelican.&lt;/p&gt;
&lt;p&gt;When I started my search for a static site generator, I first came across &lt;a href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;. I'm not particularly excited about learning Ruby, but I am excited about learning Haskell.
This quickly led me to &lt;a href="http://jaspervdj.be/hakyll/"&gt;Hakyll …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Sat, 08 Feb 2014 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2014-02-08:/posts/2014-02-08-blogsetup.html</guid><category>misc</category><category>computers</category></item><item><title>Site Properties</title><link>/posts/2014-02-03-siteproperties.html</link><description>&lt;p&gt;This site contains all the things that don't contain themselves.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Mon, 03 Feb 2014 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:None,2014-02-03:/posts/2014-02-03-siteproperties.html</guid><category>misc</category><category>math</category><category>literature</category></item><item><title>Insights into Church-Rosser</title><link>/posts/lambdacalc.html</link><description>&lt;p&gt;Untyped lambda calculus is powerful. In fact, every computable function can be encoded into lambda calculus, and thus so can every bit of Scala code you've ever written. Though, anything more complicated than your basic combinator would be almost indecipherable in its lambda calculus form. As an example, here's what …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alissa Pajer</dc:creator><pubDate>Tue, 26 Mar 2013 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:None,2013-03-26:/posts/lambdacalc.html</guid><category>misc</category><category>math</category></item></channel></rss>